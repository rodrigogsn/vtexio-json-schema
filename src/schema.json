{
  "$schema": "http://json-schema.org/draft-07/schema",
  "title": "JSON schema for VTEX IO Store Framework",
  "markdownDescription": "Validate Store Framework JSON blocks.",
  "type": "object",
  "additionalProperties": false,
  "definitions": {
    "flex-layout.row": {
      "type": "object",
      "additionalProperties": false,
      "title": "Flex Layout (Row)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-flex-layout\n\nLayout structure built within VTEX IO store framework. It allows the construction of complex custom layouts using the concept of rows and columns, setting the desired structure and positioning of blocks in a given page.\n\n`\"vtex.flex-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "borderColor": {
              "type": "string",
              "markdownDescription": "`string`\n\nThe color of the border.",
              "default": "action-primary",
              "oneOf": [
                { "const": "action-primary" },
                { "const": "action-secondary" },
                { "const": "black" },
                { "const": "black-0125" },
                { "const": "black-025" },
                { "const": "black-10" },
                { "const": "black-20" },
                { "const": "black-30" },
                { "const": "black-40" },
                { "const": "black-50" },
                { "const": "black-60" },
                { "const": "black-70" },
                { "const": "black-80" },
                { "const": "black-90" },
                { "const": "blue" },
                { "const": "danger" },
                { "const": "danger--faded" },
                { "const": "dark-gray" },
                { "const": "dashed" },
                { "const": "disabled" },
                { "const": "dotted" },
                { "const": "elite-purple" },
                { "const": "emphasis" },
                { "const": "gray" },
                { "const": "green" },
                { "const": "heavy-blue" },
                { "const": "heavy-rebel-pink" },
                { "const": "light-blue" },
                { "const": "light-gray" },
                { "const": "light-marine" },
                { "const": "light-silver" },
                { "const": "marine" },
                { "const": "mid-gray" },
                { "const": "muted-1" },
                { "const": "muted-2" },
                { "const": "muted-3" },
                { "const": "muted-4" },
                { "const": "muted-5" },
                { "const": "near-black" },
                { "const": "near-white" },
                { "const": "none" },
                { "const": "rebel-pink" },
                { "const": "red" },
                { "const": "serious-black" },
                { "const": "silver" },
                { "const": "solid" },
                { "const": "success" },
                { "const": "success--faded" },
                { "const": "transparent" },
                { "const": "warning" },
                { "const": "warning--faded" },
                { "const": "washed-blue" },
                { "const": "washed-green" },
                { "const": "washed-red" },
                { "const": "washed-yellow" },
                { "const": "white" },
                { "const": "white-0125" },
                { "const": "white-025" },
                { "const": "white-05" },
                { "const": "white-10" },
                { "const": "white-20" },
                { "const": "white-30" },
                { "const": "white-40" },
                { "const": "white-50" },
                { "const": "white-60" },
                { "const": "white-70" },
                { "const": "white-80" },
                { "const": "white-90" },
                { "const": "yellow" }
              ]
            },
            "borderWidth": {
              "type": ["number", "string"],
              "markdownDescription": "`0...5`\n\nA `number` or `string` magnitude for the `bw` Tachyons token to be applied to the row.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" }
              ]
            },
            "border": {
              "type": "string",
              "markdownDescription": "`string | string[]`\n\nAn array to define in which sides of the row a border should be applied to (`top`, `right`, `bottom`, `left` or `all`).",
              "default": "",
              "oneOf": [
                { "const": "top" },
                { "const": "right" },
                { "const": "bottom" },
                { "const": "left" },
                { "const": "all" }
              ]
            },
            "colGap": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the pr Tachyons token to be applied to columns inside of the `flex-layout.row`.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "colSizing": {
              "type": "string",
              "markdownDescription": "`equal | auto`\n\nControls the width of the columns inside the `flex-layout.row`.",
              "default": "equal",
              "oneOf": [{ "const": "equal" }, { "const": "auto" }]
            },
            "fullWidth": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether or not the component should occupy all the available width from its parent.",
              "default": false
            },
            "horizontalAlign": {
              "type": "string",
              "markdownDescription": "`left | right | center`\n\nControls horizontal alignment for the items inside the `flex-layout.row`.",
              "default": "left",
              "oneOf": [
                { "const": "left" },
                { "const": "right" },
                { "const": "center" }
              ]
            },
            "marginBottom": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `mb` Tachyons token to be applied to the row.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "marginTop": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `mt` Tachyons token to be applied to the row.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "paddingBottom": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `pb` Tachyons token to be applied to the row.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "paddingTop": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `pt` Tachyons token to be applied to the row.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "preserveLayoutOnMobile": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether or not the `flex-layout.row` should break into a column layout on mobile.",
              "default": false
            },
            "preventHorizontalStretch": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nPrevents the row from stretching horizontally to fill its parent width.",
              "default": false
            },
            "preventVerticalStretch": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nPrevents the row from stretching vertically to fill its parent height with `items-stretch` token.",
              "default": false
            },
            "rowGap": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `pb` Tachyons token to be applied to columns inside of the `flex-layout.row`.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "experimentalHideEmptyCols": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nHide empty children columns [NO DOCS]",
              "default": false
            },
            "colJustify": {
              "type": "string",
              "markdownDescription": "`string`\n\nApply some of the `justify-content` values [NO DOCS].",
              "default": "between",
              "oneOf": [{ "const": "between" }, { "const": "auto" }]
            }
          }
        }
      }
    },

    "flex-layout.col": {
      "type": "object",
      "additionalProperties": false,
      "title": "Flex Layout (Column)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-flex-layout\n\nLayout structure built within VTEX IO store framework. It allows the construction of complex custom layouts using the concept of rows and columns, setting the desired structure and positioning of blocks in a given page.\n\n`\"vtex.flex-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "borderColor": {
              "type": "string",
              "markdownDescription": "`string`\n\nThe color of the border.",
              "default": "action-primary",
              "oneOf": [
                { "const": "action-primary" },
                { "const": "action-secondary" },
                { "const": "black" },
                { "const": "black-0125" },
                { "const": "black-025" },
                { "const": "black-10" },
                { "const": "black-20" },
                { "const": "black-30" },
                { "const": "black-40" },
                { "const": "black-50" },
                { "const": "black-60" },
                { "const": "black-70" },
                { "const": "black-80" },
                { "const": "black-90" },
                { "const": "blue" },
                { "const": "danger" },
                { "const": "danger--faded" },
                { "const": "dark-gray" },
                { "const": "dashed" },
                { "const": "disabled" },
                { "const": "dotted" },
                { "const": "elite-purple" },
                { "const": "emphasis" },
                { "const": "gray" },
                { "const": "green" },
                { "const": "heavy-blue" },
                { "const": "heavy-rebel-pink" },
                { "const": "light-blue" },
                { "const": "light-gray" },
                { "const": "light-marine" },
                { "const": "light-silver" },
                { "const": "marine" },
                { "const": "mid-gray" },
                { "const": "muted-1" },
                { "const": "muted-2" },
                { "const": "muted-3" },
                { "const": "muted-4" },
                { "const": "muted-5" },
                { "const": "near-black" },
                { "const": "near-white" },
                { "const": "none" },
                { "const": "rebel-pink" },
                { "const": "red" },
                { "const": "serious-black" },
                { "const": "silver" },
                { "const": "solid" },
                { "const": "success" },
                { "const": "success--faded" },
                { "const": "transparent" },
                { "const": "warning" },
                { "const": "warning--faded" },
                { "const": "washed-blue" },
                { "const": "washed-green" },
                { "const": "washed-red" },
                { "const": "washed-yellow" },
                { "const": "white" },
                { "const": "white-0125" },
                { "const": "white-025" },
                { "const": "white-05" },
                { "const": "white-10" },
                { "const": "white-20" },
                { "const": "white-30" },
                { "const": "white-40" },
                { "const": "white-50" },
                { "const": "white-60" },
                { "const": "white-70" },
                { "const": "white-80" },
                { "const": "white-90" },
                { "const": "yellow" }
              ]
            },
            "borderWidth": {
              "type": ["number", "string"],
              "markdownDescription": "`0...5`\n\nA `number` or `string` magnitude for the `bw` Tachyons token to be applied to the column.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" }
              ]
            },
            "border": {
              "type": "string",
              "markdownDescription": "`string | string[]`\n\nAn array to define in which sides of the column a border should be applied to (`top`, `right`, `bottom`, `left` or `all`).",
              "default": "",
              "oneOf": [
                { "const": "top" },
                { "const": "right" },
                { "const": "bottom" },
                { "const": "left" },
                { "const": "all" }
              ]
            },
            "horizontalAlign": {
              "type": "string",
              "markdownDescription": "`left | right | center`\n\nControls horizontal alignment for the items inside the `flex-layout.col.`",
              "default": "left",
              "oneOf": [
                { "const": "left" },
                { "const": "right" },
                { "const": "center" }
              ]
            },
            "marginLeft": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `ml` Tachyons token to be applied to the column.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "marginRight": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `mr` Tachyons token to be applied to the column.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "paddingLeft": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `pl` Tachyons token to be applied to the column.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "paddingRight": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `pr` Tachyons token to be applied to the column.",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "preventVerticalStretch": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nPrevents the row from stretching vertically to fill its parent height with `height: 100%`, using `height: auto` instead.",
              "default": false
            },
            "rowGap": {
              "type": ["number", "string"],
              "markdownDescription": "`0...10`\n\nA `number` or `string` magnitude for the `pb` Tachyons token to be applied to rows inside of the `flex-layout.col.`",
              "default": 0,
              "oneOf": [
                { "const": 0 },
                { "const": 1 },
                { "const": 2 },
                { "const": 3 },
                { "const": 4 },
                { "const": 5 },
                { "const": 6 },
                { "const": 7 },
                { "const": 8 },
                { "const": 9 },
                { "const": 10 },
                { "const": "0" },
                { "const": "1" },
                { "const": "2" },
                { "const": "3" },
                { "const": "4" },
                { "const": "5" },
                { "const": "6" },
                { "const": "7" },
                { "const": "8" },
                { "const": "9" },
                { "const": "10" }
              ]
            },
            "verticalAlign": {
              "type": "string",
              "markdownDescription": "`top | middle | bottom`\n\nControls vertical alignment for the items inside the `flex-layout.col.`",
              "default": "top",
              "oneOf": [
                { "const": "top" },
                { "const": "middle" },
                { "const": "bottom" }
              ]
            },
            "width": {
              "type": "string",
              "markdownDescription": "`0...100% | grow`\n\nSets the width of the column. Accepts either a percentage or 'grow'.",
              "default": "grow"
            },
            "grow": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nApply `flex-grow-1` class. [NO DOCS]",
              "default": false
            }
          }
        }
      }
    },

    "add-to-cart-button": {
      "type": "object",
      "additionalProperties": false,
      "title": "Add To Cart Button",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-add-to-cart-button\n\nThe add-to-cart-button is a block responsible for adding products in the Minicart (minicart.v2).\n\n`\"vtex.add-to-cart-button@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "onClickBehavior": {
              "type": "string",
              "markdownDescription": "enum\n\nControls what happens when users click on the button. Possible values are: `go-to-product-page`, `add-to-cart`, and `ensure-sku-selection` (if multiple SKUs are available, users will be redirected to the product page to select the desired one. If the product only has 1 SKU available, it will be added to the cart once the button is clicked on).",
              "oneOf": [
                { "const": "go-to-product-page" },
                { "const": "add-to-cart" },
                { "const": "ensure-sku-selection" }
              ]
            },
            "onClickEventPropagation": {
              "type": "string",
              "markdownDescription": "enum\n\nControls whether the 'onClick' event (triggered upon user clicks) should be spread to the page's parent elements. Possible values are: disabled and enabled.",
              "oneOf": [{ "const": "disabled" }, { "const": "enabled" }],
              "default": "enabled"
            },
            "isOneClickBuy": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the user should be redirected to the checkout page (true) or not (false) when the Add To Cart Button is clicked on.",
              "default": true
            },
            "customOneClickBuyLink": {
              "type": "string",
              "markdownDescription": "string\n\nDefines the link to where users will be redirected when the Add To Cart Button is clicked on and the isOneClickBuy prop is set to true.",
              "default": "/checkout/#/cart"
            },
            "customToastUrl": {
              "type": "string",
              "markdownDescription": "string\n\nDefines the link to where users will be redirected when the Toast (pop-up notification displayed when adding an item to the minicart) is clicked on.",
              "default": "/checkout/#/cart"
            },
            "text": {
              "type": "string",
              "markdownDescription": "string\n\nDefines a custom text message to be displayed on the Add To Cart Button.",
              "default": "Add to cart"
            },
            "unavailableText": {
              "type": "string",
              "markdownDescription": "string\n\nDefines a custom text message to be displayed on the Add To Cart Button when a product is unavailable.",
              "default": "Unavailable"
            },
            "customPixelEventId": {
              "type": "string",
              "markdownDescription": "string\n\nDefine the id for the event that will be sent by the the button upon user interaction."
            }
          }
        }
      }
    },

    "breadcrumb": {
      "type": "object",
      "additionalProperties": false,
      "title": "Breadcrumb",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-breadcrumb\n\nThe VTEX BreadCrumb is a navigation scheme that shows a user's browsing history up to their current location in your store.\n\n`\"vtex.breadcrumb@1.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "showOnMobile": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nIt determines whether Breadcrumb should also be displayed on mobile",
              "default": true
            },
            "homeIconSize": {
              "type": "number",
              "markdownDescription": "number\n\nControls the size property of IconHome",
              "default": 26
            },
            "caretIconSize": {
              "type": "number",
              "markdownDescription": "number\n\nControls the size property of IconCaret",
              "default": 8
            }
          }
        }
      }
    },

    "breadcrumb.search": {
      "type": "object",
      "additionalProperties": false,
      "title": "Breadcrumb (Search Result)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-breadcrumb\n\nThe VTEX BreadCrumb is a navigation scheme that shows a user's browsing history up to their current location in your store.\n\n`\"vtex.breadcrumb@1.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "showOnMobile": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nIt determines whether Breadcrumb should also be displayed on mobile",
              "default": true
            },
            "homeIconSize": {
              "type": "number",
              "markdownDescription": "number\n\nControls the size property of IconHome",
              "default": 26
            },
            "caretIconSize": {
              "type": "number",
              "markdownDescription": "number\n\nControls the size property of IconCaret",
              "default": 8
            }
          }
        }
      }
    },

    "rich-text": {
      "type": "object",
      "additionalProperties": false,
      "title": "Rich Text",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-rich-text\n\nThe Rich Text is a block that brings texts to your store and everything else that Markdown language is able to. It converts texts written in Markdown language and displays its content as HTML elements.\n\n`\"vtex.rich-text@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "font": {
              "type": ["string", "object"],
              "markdownDescription": "string | {desktop: string, tablet: string, mobile: string}\n\nDefine the tachyon token to be used as font. Default: t-body",
              "default": "t-body"
            },
            "textColor": {
              "type": "string",
              "markdownDescription": "string\n\nDefine the tachyon token to be used as text color. Default: c-on-base",
              "default": "c-on-base"
            },
            "text": {
              "type": "string",
              "markdownDescription": "TextAlignmentEnum\n\nText written in markdown language to be displayed.\n\nMarkdown Cheatsheet: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet",
              "default": "Example [link](https://help.vtex.com/en/faq/what-is-vtex-io).\n*Be Bold!*\n**This is italic**"
            },
            "textAlignment": {
              "type": "string",
              "markdownDescription": "TextAlignmentEnum\n\nControl the text alignment inside component. Default: 'LEFT'",
              "oneOf": [
                {
                  "type": "string",
                  "const": "LEFT",
                  "markdownDescription": "Text will be to the left. If isFullModeStyle is false, image will be on the right"
                },
                {
                  "type": "string",
                  "const": "CENTER",
                  "markdownDescription": "Text will be in the center. Not applicable if isFullModeStyle is false."
                },
                {
                  "type": "string",
                  "const": "RIGHT",
                  "markdownDescription": "Text will be to the right. If isFullModeStyle is false, image will be on the left"
                }
              ]
            },
            "textPosition": {
              "type": "string",
              "markdownDescription": "TextPositionEnum\n\nChoose in which position of the component text will be displayed, left, center or right. Default: 'LEFT'",
              "oneOf": [
                {
                  "type": "string",
                  "const": "LEFT",
                  "markdownDescription": "Text alignment will be to the left."
                },
                {
                  "type": "string",
                  "const": "CENTER",
                  "markdownDescription": "Text alignment will be to the center."
                },
                {
                  "type": "string",
                  "const": "RIGHT",
                  "markdownDescription": "Text alignment will be to the right."
                }
              ]
            },
            "htmlId": {
              "type": "string",
              "markdownDescription": "string\n\nAdd an `id` HTML attribute to this rich-text element [NO DOCS]",
              "default": ""
            }
          }
        }
      }
    },

    "disclosure-layout": {
      "type": "object",
      "additionalProperties": false,
      "title": "Disclosure Layout",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-disclosure-layout\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Parent block that enables you to build the disclosure layout using its 3 children blocks: `disclosure-trigger`, `disclosure-content`, and `disclosure-state-indicator`.\n\n`\"vtex.disclosure-layout@1.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "default": ["disclosure-trigger#name", "disclosure-content#name"],
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "initialVisibility": {
              "type": "string",
              "markdownDescription": "enum\n\nDefines the initial visibility of the layout content. Possible values are: `visible` (content initially open) or `hidden` (content is only displayed with user interaction).",
              "default": "visible",
              "oneOf": [
                {
                  "const": "visible"
                },
                {
                  "const": "hidden"
                }
              ]
            },
            "animated": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether or not the layout content should have animations. When set as true, this prop will enable additional data-* attributes on the content which you can use as selectors in CSS. It will also ensure that the element will get hidden once the transition has ended.",
              "default": true
            }
          }
        }
      }
    },

    "disclosure-trigger": {
      "type": "object",
      "additionalProperties": false,
      "title": "Disclosure Layout (Trigger)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-disclosure-layout\n\nDeclares the blocks that will be rendered as disclosure triggers i.e. the blocks that when clicked on will open or close the disclosure content (defined by the disclosure-content block).\n\n`\"vtex.disclosure-layout@1.x\"`",
      "properties": {
        "children": {
          "type": "array",
          "markdownDescription": "Name of the block that will be rendered in case no blocks are declared in the Show or Hide props.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "Show": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block that will be rendered when prompt to show the content."
            },
            "Hide": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block that will be rendered when prompt to hide the content."
            },
            "as": {
              "type": "string",
              "markdownDescription": "string\n\nHTML tag to be applied to the component when it is rendered on the UI.",
              "default": "button"
            }
          }
        }
      }
    },

    "disclosure-content": {
      "type": "object",
      "additionalProperties": false,
      "title": "Disclosure Layout (Content)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-disclosure-layout\n\nDeclares the blocks that are responsible for displaying the desired content when the disclosure trigger is clicked on.\n\n`\"vtex.disclosure-layout@1.x\"`",
      "properties": {
        "children": {
          "type": "array",
          "markdownDescription": "List of blocks that will render the desired disclosure content.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "disclosure-state-indicator": {
      "type": "object",
      "additionalProperties": false,
      "title": "Disclosure Layout (State Indicator)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-disclosure-layout\n\nOptional block responsible for rendering chevron or other UI elements that change when the disclosure is opened or closed.\n\n`\"vtex.disclosure-layout@1.x\"`",
      "properties": {
        "children": {
          "type": "array",
          "markdownDescription": "List of blocks that will render the desired disclosure content.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "Show": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block that will be rendered when prompt to show the content."
            },
            "Hide": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block that will be rendered when prompt to hide the content."
            }
          }
        }
      }
    },

    "disclosure-layout-group": {
      "type": "object",
      "additionalProperties": false,
      "title": "Disclosure Layout (Group)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-disclosure-layout\n\nWraps many disclosure-layouts blocks at once. You may use this block to control when each one of them should be displayed, making it possible to have only one disclosure-layout open at a time.\n\n`\"vtex.disclosure-layout@1.x\"`",
      "properties": {
        "children": {
          "type": "array",
          "markdownDescription": "List of blocks that will render the desired disclosure content.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "maxVisible": {
              "type": "string",
              "markdownDescription": "enum\n\nDefines how many disclosure-layout blocks should be displayed at time. Possible values are: one (only one disclosure-layout block should have its content displayed at time) or many (different disclosure-layout's contents can be displayed at time).",
              "default": "many",
              "oneOf": [{ "const": "many" }, { "const": "one" }]
            }
          }
        }
      }
    },

    "disclosure-trigger-group": {
      "type": "object",
      "additionalProperties": false,
      "title": "Disclosure Layout (Trigger Group)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-disclosure-layout\n\nWraps many disclosure-trigger blocks at once. You may use this block to control when and how the disclosure-layouts blocks declared inside the disclosure-layout-group should be displayed.\n\n`\"vtex.disclosure-layout@1.x\"`",
      "properties": {
        "children": {
          "type": "array",
          "markdownDescription": "List of blocks that will render the desired disclosure content.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "Show": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block that will be rendered when prompt to show the content."
            },
            "Hide": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block that will be rendered when prompt to hide the content."
            },
            "as": {
              "type": "string",
              "markdownDescription": "block\n\nHTML tag to be applied to the component when it is rendered on the UI.",
              "default": "button"
            }
          }
        }
      }
    },

    "condition-layout.product": {
      "type": "object",
      "additionalProperties": false,
      "title": "Condition Layout (Product)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-condition-layout\n\nDefines the condition logic on the product context and the children blocks that are going to be rendered in case the predefined conditions are met.\n\n`\"vtex.condition-layout@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "conditions": {
              "type": "object",
              "markdownDescription": "object\n\nList of desired conditions.",
              "properties": {
                "subject": {
                  "type": "string",
                  "markdownDescription": "string\n\nDefines, according to the product context where the block in declared in, which data is needed from the UI to validate the value chosen in the object prop. Check below the possible values for this prop.\n\n**Subject** | **Arguments**\n\nproductId | `{ id: string }`\n\ncategoryId | `{ id: string }`\n\nbrandId | `{ id: string }`\n\nselectedItemId | `{ id: string }`\n\nproductClusters | `{ id: string }`\n\ncategoryTree | `{ id: string }`\n\nspecificationProperties | `{ name: string, value: string? }`\n\nareAllVariationsSelected | *No arguments are expected.*\n\nisProductAvailable | *No arguments are expected.*\n\nhasMoreSellersThan | `{ quantity: number }`",
                  "oneOf": [
                    { "const": "productId" },
                    { "const": "categoryId" },
                    { "const": "brandId" },
                    { "const": "selectedItemId" },
                    { "const": "productClusters" },
                    { "const": "categoryTree" },
                    { "const": "specificationProperties" },
                    { "const": "areAllVariationsSelected" },
                    { "const": "isProductAvailable" },
                    { "const": "hasMoreSellersThan" }
                  ]
                },
                "arguments": {
                  "type": "object",
                  "markdownDescription": "object\n\nDefines the condition parameters. Notice: this prop value varies according to the value set to the subject prop. Check below the table for the subject's possible values and their expected arguments.\n\n**Subject** | **Arguments**\n\nproductId | `{ id: string }`\n\ncategoryId | `{ id: string }`\n\nbrandId | `{ id: string }`\n\nselectedItemId | `{ id: string }`\n\nproductClusters | `{ id: string }`\n\ncategoryTree | `{ id: string }`\n\nspecificationProperties | `{ name: string, value: string? }`\n\nareAllVariationsSelected | *No arguments are expected.*\n\nisProductAvailable | *No arguments are expected.*\n\nhasMoreSellersThan | `{ quantity: number }`"
                },
                "toBe": {
                  "type": "boolean",
                  "markdownDescription": "boolean\n\nWhether the data fetched in the subject prop must met the predefined conditions to render the new layout (true) or not (false).",
                  "default": false
                }
              }
            },
            "matchType": {
              "type": "string",
              "markdownDescription": "enum\n\nLayout rendering criteria. Possible values are: all (all conditions must be matched in order to render the layout), any (at least one of the conditions must be matched in order to render the layout) or none (no conditions must be matched in order to render the layout).",
              "default": ["all"],
              "oneOf": [
                { "const": "all" },
                { "const": "none" },
                { "const": "any" }
              ]
            },
            "Then": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block to be rendered if the conditions are met. If no value is defined, the blocks declared as children of condition-layout.product will be rendered instead."
            },
            "Else": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block to be rendered if the conditions are not met.",
              "default": "button"
            }
          }
        }
      }
    },

    "condition-layout.binding": {
      "type": "object",
      "additionalProperties": false,
      "title": "Condition Layout (Binding)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-condition-layout\n\nDefines the condition logic on the current binding and the children blocks that are going to be rendered in case the predefined conditions are met.\n\n`\"vtex.condition-layout@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "conditions": {
              "type": "object",
              "markdownDescription": "object\n\nList of desired conditions.",
              "properties": {
                "subject": {
                  "type": "string",
                  "markdownDescription": "string\n\nDefines, according to the product context where the block in declared in, which data is needed from the UI to validate the value chosen in the object prop. Check below the possible values for this prop.\n\n**Subject** | **Arguments**\n\nbindingId | `{ id: string }`",
                  "oneOf": [{ "const": "bindingId" }]
                },
                "arguments": {
                  "type": "object",
                  "markdownDescription": "object\n\nDDefines, according to the product context where the block in declared in, which data is needed from the UI to validate the value chosen in the object prop. Check below the possible values for this prop.\n\n**Subject** | **Arguments**\n\nbindingId | `{ id: string }`"
                },
                "toBe": {
                  "type": "boolean",
                  "markdownDescription": "boolean\n\nWhether the data fetched in the subject prop must met the predefined conditions to render the new layout (true) or not (false).",
                  "default": false
                }
              }
            },
            "matchType": {
              "type": "string",
              "markdownDescription": "enum\n\nLayout rendering criteria. Possible values are: all (all conditions must be matched in order to render the layout), any (at least one of the conditions must be matched in order to render the layout) or none (no conditions must be matched in order to render the layout).",
              "default": ["all"],
              "oneOf": [
                { "const": "all" },
                { "const": "none" },
                { "const": "any" }
              ]
            },
            "Then": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block to be rendered if the conditions are met. If no value is defined, the blocks declared as children of condition-layout.product will be rendered instead."
            },
            "Else": {
              "type": "string",
              "markdownDescription": "block\n\nName of the block to be rendered if the conditions are not met.",
              "default": "button"
            }
          }
        }
      }
    },

    "responsive-layout.desktop": {
      "type": "object",
      "additionalProperties": false,
      "title": "Responsive Layout (Desktop)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-responsive-layout\n\nAllows you to declare layout structures that will only be rendered in desktop screen-size breakpoint.\n\n`\"vtex.responsive-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification.",
          "default": "Desktop"
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "responsive-layout.mobile": {
      "type": "object",
      "additionalProperties": false,
      "title": "Responsive Layout (Mobile)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-responsive-layout\n\nAllows you to declare layout structures that will only be rendered in mobile screen-size breakpoint (tablet and phone combined).\n\n`\"vtex.responsive-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification.",
          "default": "Mobile"
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "responsive-layout.tablet": {
      "type": "object",
      "additionalProperties": false,
      "title": "Responsive Layout (Tablet)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-responsive-layout\n\nAllows you to declare layout structures that will only be rendered in tablet screen-size breakpoint.\n\n`\"vtex.responsive-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification.",
          "default": "Tablet"
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "responsive-layout.phone": {
      "type": "object",
      "additionalProperties": false,
      "title": "Responsive Layout (Phone)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-responsive-layout\n\nAllows you to declare layout structures that will only be rendered in phone screen-size breakpoint.\n\n`\"vtex.responsive-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification.",
          "default": "Phone"
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "footer": {
      "type": "object",
      "additionalProperties": false,
      "title": "Footer",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-footer\n\nFooter is a store component that shows information about the store such as address, social networks and payment methods. Furthermore, it is possible to add hyperlinks for privacy policy, FAQ, benefits and attendance. This app is used by store theme.\n\n`\"vtex.store-footer@2.x\"`",
      "properties": {
        "blocks": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          },
          "default": ["footer-layout.desktop", "footer-layout.mobile"]
        }
      }
    },

    "footer-layout.desktop": {
      "type": "object",
      "additionalProperties": false,
      "title": "Footer Layout (Desktop)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-footer\n\nAllows you to declare a footer layout structure that will only be rendered in desktop screen-size breakpoint.\n\n`\"vtex.store-footer@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification.",
          "default": "Desktop"
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "footer-layout.mobile": {
      "type": "object",
      "additionalProperties": false,
      "title": "Footer Layout (Mobile)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-footer\n\nAllows you to declare a footer layout structure that will only be rendered in mobile screen-size breakpoint.\n\n`\"vtex.store-footer@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification.",
          "default": "Mobile"
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "powered-by": {
      "type": "object",
      "additionalProperties": false,
      "title": "Footer (Powered By)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-footer\n\nShows the \"powered by\" section in footer.\n\n`\"vtex.store-footer@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "showInColor": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the icons are colored or not.",
              "default": false
            }
          }
        }
      }
    },

    "accepted-payment-methods": {
      "type": "object",
      "additionalProperties": false,
      "title": "Footer (Accepted Payment Methods)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-footer\n\nShows the accepted payment methods in footer.\n\n`\"vtex.store-footer@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "paymentMethods": {
              "type": "array",
              "markdownDescription": "Array\n\nPossible values: mastercard, visa, diners club",
              "items": {
                "type": "string",
                "enum": ["mastercard", "visa", "diners club"]
              }
            },
            "showInColor": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the icons are colored or not",
              "default": false
            }
          }
        }
      }
    },

    "social-networks": {
      "type": "object",
      "additionalProperties": false,
      "title": "Footer (Social Networks)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-footer\n\nShows the social networks in footer.\n\n`\"vtex.store-footer@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "title": {
              "type": "string",
              "markdownDescription": "`string`\n\nText to show above of list of links",
              "default": ""
            },
            "showInColor": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the icons are colored or not",
              "default": false
            },
            "socialNetworks": {
              "type": "array",
              "markdownDescription": "`array`\n\nArray of social networks. Possible values for `name`: `facebook`, `twitter`, `linkedin`, `youtube`, `pinterest`, `instagram`",
              "default": [
                { "url": "#", "name": "facebook" },
                { "url": "#", "name": "twitter" },
                { "url": "#", "name": "linkedin" },
                { "url": "#", "name": "youtube" },
                { "url": "#", "name": "pinterest" },
                { "url": "#", "name": "instagram" }
              ]
            }
          }
        }
      }
    },

    "header": {
      "type": "object",
      "additionalProperties": false,
      "title": "Header",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-header\n\nThe Header app is responsible for displaying a navigation bar fixed on a store's page upper side. Other blocks that are important for user navigation are found in the Header, for example the store's logo, the minicart, user login and search bar.\n\n`\"vtex.store-header@2.x\"`",
      "properties": {
        "blocks": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          },
          "default": ["header-layout.desktop", "header-layout.mobile"]
        }
      }
    },

    "header-layout.desktop": {
      "type": "object",
      "additionalProperties": false,
      "title": "Header Layout (Desktop)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-header\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Defines the Header layout for desktop device through header-row blocks.\n\n`\"vtex.store-header@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification.",
          "default": "Desktop"
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "header-layout.mobile": {
      "type": "object",
      "additionalProperties": false,
      "title": "Header Layout (Mobile)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-header\n\nDefines the Header layout for mobile device through header-row blocks.\n\n`\"vtex.store-header@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification.",
          "default": "Mobile"
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "header-row": {
      "type": "object",
      "additionalProperties": false,
      "title": "Header Row",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-header\n\nCreate Header lines according to your store needs.\n\n`\"vtex.store-header@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "zIndex": {
              "type": "number",
              "markdownDescription": "number\n\nCSS property that controls the vertical stacking order of elements for overlapping.",
              "default": 0
            },
            "sticky": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the Header margin should be fixed on the layout (true) or not (false)",
              "default": false
            },
            "fullWidth": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the Header should take the full width of the screen or not",
              "default": true
            },
            "inverted": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the row will use the base color (false) or the inverted base color (true) as defined in styles.json.",
              "default": false
            }
          }
        }
      }
    },

    "header-force-center": {
      "type": "object",
      "additionalProperties": false,
      "title": "Header Force Center",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-header\n\nCentralizes its children blocks in a Header row. When passed on, the header-force-center centralizes its children blocks in a Header row.\n\n`\"vtex.store-header@2.x\"`",
      "properties": {
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "header-border": {
      "type": "object",
      "additionalProperties": false,
      "title": "Header Border",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-header\n\nAdds a 1px margin to a Header row.\n\n`\"vtex.store-header@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "sticky": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the Header margin should be fixed in the layout or not",
              "default": false
            }
          }
        }
      }
    },

    "login": {
      "type": "object",
      "additionalProperties": false,
      "title": "Login",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-login\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Renders the Login component, as shown in the media above.\n\n`\"vtex.login@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "optionsTitle": {
              "type": "string",
              "markdownDescription": "string\n\nText to entitle the login options.",
              "default": ""
            },
            "emailAndPasswordTitle": {
              "type": "string",
              "markdownDescription": "string\n\nText to display the email-and-password option.",
              "default": ""
            },
            "accessCodeTitle": {
              "type": "string",
              "markdownDescription": "string\n\nText to display the access-code option.",
              "default": ""
            },
            "emailPlaceholder": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as placeholder to the email input.",
              "default": ""
            },
            "passwordPlaceholder": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as placeholder to the password input.",
              "default": ""
            },
            "accessCodePlaceholder": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as placeholder to the access code input.",
              "default": ""
            },
            "showPasswordVerificationIntoTooltip": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether a tooltip responsible for checking the password format should be shown (true) or not (false).",
              "default": true
            },
            "showIconProfile": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the `hpa-profile` icon from [Store Icons](https://vtex.io/docs/components/all/vtex.store-icons/) should be displayed on the Login component (`true`) or not (`false`).",
              "default": true
            },
            "iconLabel": {
              "type": "string",
              "markdownDescription": "string\n\nText string to entitle the Login icon.",
              "default": ""
            },
            "hideIconLabel": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the text string defined for the Login icon should be hidden (true) or not (false).",
              "default": false
            },
            "labelClasses": {
              "type": ["array", "string"],
              "markdownDescription": "[string]\n\nLogin icon's classnames.",
              "default": []
            },
            "providerPasswordButtonLabel": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as the password button label.",
              "default": ""
            },
            "hasIdentifierExtension": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the identifier extension configurations should be enabled (`true`) or not (`false`). For more info on this, check out the [Advanced Configurations](https://developers.vtex.com/vtex-developer-docs/docs/vtex-login#advanced-configuration)",
              "default": true
            },
            "identifierPlaceholder": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as placeholder to the extension input.",
              "default": ""
            },
            "invalidIdentifierError": {
              "type": "string",
              "markdownDescription": "string\n\nError message for invalid user identifier.",
              "default": ""
            },
            "mirrorTooltipToRight": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the Login tooltip should open towards the right side of the screen (true) or not (false).",
              "default": false
            },
            "logInButtonBehavior": {
              "type": "string",
              "markdownDescription": "enum\n\nExpected behavior of the Login component when clicked on. Possible values are: popover (opens a popover tab) and link (redirects user to the /login page).",
              "default": "popover",
              "oneOf": [{ "const": "popover" }, { "const": "link" }]
            },
            "accountOptionsButtonBehavior": {
              "type": "string",
              "markdownDescription": "enum\n\nExpected behavior of the My account button when clicked on. Possible values are: popover (opens a popover tab) and link (redirects user to the /account page).",
              "default": "popover",
              "oneOf": [{ "const": "popover" }, { "const": "link" }]
            },
            "accountOptionLinks": {
              "type": "object",
              "markdownDescription": "[object]\n\nCreates a custom link to replace the default one set for the accountOptionsButtonBehavior's link value (/account). Check out below the available props for the object.",
              "properties": {
                "label": {
                  "type": "string",
                  "markdownDescription": "string\n\nText label for the custom link.",
                  "default": ""
                },
                "path": {
                  "type": "string",
                  "markdownDescription": "string\n\nCustom link's path.",
                  "default": ""
                },
                "cssClass": {
                  "type": ["array", "string"],
                  "markdownDescription": "[string]\n\nLogin icon's class names.",
                  "default": ""
                }
              }
            },
            "termsAndConditions": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed below the login options regarding terms&conditions.",
              "default": ""
            },
            "hasGoogleOneTap": {
              "type": "boolean",
              "markdownDescription": "boolean\n\n[BETA] Whether the [Google's One-tap sign-up and auto sign-in](https://developers.google.com/identity/one-tap/web/) solution should be enabled (true) or not (false).",
              "default": false
            },
            "googleOneTapAlignment": {
              "type": "string",
              "markdownDescription": "enum\n\n[BETA] Defines pop-up alignment for the Google One-tap login. Possible values are Left and Right.",
              "default": "Right",
              "oneOf": [{ "const": "Left" }, { "const": "Right" }]
            },
            "googleOneTapMarginTop": {
              "type": "string",
              "markdownDescription": "string\n\n[BETA] Defines the pop-up top margin for the Google One-tap login. The values supported are the same supported by the CSS property top.",
              "default": "3rem"
            },
            "disabledEmailInputs": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether user email editing should be allowed (true) or not (false).",
              "default": false
            }
          }
        }
      }
    },

    "login-content": {
      "type": "object",
      "additionalProperties": false,
      "title": "Login Content",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-login\n\nOnly renders the login form.\n\n`\"vtex.login@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "isInitialScreenOptionOnly": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether only the login options will be displayed on the initial screen (true) or not (false).",
              "default": true
            },
            "defaultOption": {
              "type": "number",
              "markdownDescription": "enum\n\nDefines the default login options to be shown. Possible values are: 0 (shows the access-code option for login) and 1 (shows the email/password option for login).",
              "default": 0,
              "oneOf": [{ "const": 0 }, { "const": 1 }]
            },
            "optionsTitle": {
              "type": "string",
              "markdownDescription": "string\n\nDefines the default login options to be shown. Possible values are: 0 (shows the access-code option for login) and 1 (shows the email/password option for login).",
              "default": ""
            },
            "emailPlaceholder": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as placeholder to the email input.",
              "default": ""
            },
            "passwordPlaceholder": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as placeholder to the password input.",
              "default": ""
            },
            "accessCodePlaceholder": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as placeholder to the access code input.",
              "default": ""
            },
            "showPasswordVerificationIntoTooltip": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether a tooltip responsible for checking the password format should be shown (true) or not (false).",
              "default": true
            },
            "providerPasswordButtonLabel": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as the password button label.",
              "default": ""
            },
            "hasIdentifierExtension": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the identifier extension configurations should be enabled (`true`) or not (`false`). For more info on this, check out the [Advanced Configurations](https://developers.vtex.com/vtex-developer-docs/docs/vtex-login#advanced-configuration)",
              "default": true
            },
            "identifierPlaceholder": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed as placeholder to the extension input.",
              "default": ""
            },
            "invalidIdentifierError": {
              "type": "string",
              "markdownDescription": "string\n\nError message for invalid user identifier.",
              "default": ""
            },
            "termsAndConditions": {
              "type": "string",
              "markdownDescription": "string\n\nText to be displayed below the login options regarding terms&conditions.",
              "default": ""
            },
            "disabledEmailInputs": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether user email editing should be allowed (true) or not (false).",
              "default": false
            }
          }
        }
      }
    },

    "minicart.v2": {
      "type": "object",
      "additionalProperties": false,
      "title": "Minicart",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-minicart\n\nThe VTEX Minicart is a block that displays a summary list of all items added by customers in their shopping cart. Its data is fetched from the Checkout OrderForm API.\n\n![Warning](https://developers.vtex.com/img/emojis/warning.png|width=12px) The Minicart v2 will only effectively function if the store uses the Add To Cart Button instead of the Buy Button in blocks such as the Shelf and the Product Details Page.\n\n`\"vtex.minicart@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "variation": {
              "type": "string",
              "markdownDescription": "enum\n\nMinicart behavior when rendered. Possible values are: popup (it pops up on the Homepage in a minitab window) , drawer (it is rendered through a side bar) or link (when clicked on, it redirects the user to the Checkout page).",
              "default": "drawer",
              "oneOf": [
                { "const": "drawer" },
                { "const": "popup" },
                { "const": "link" }
              ]
            },
            "drawerSlideDirection": {
              "type": "string",
              "markdownDescription": "enum\n\nSlide direction for the drawer Minicart opening. Possible values are: rightToLeft or leftToRight).",
              "default": "rightToLeft",
              "oneOf": [{ "const": "rightToLeft" }, { "const": "leftToRight" }]
            },
            "linkVariationUrl": {
              "type": "string",
              "markdownDescription": "string\n\nLink associated to the link Minicart.",
              "default": ""
            },
            "maxDrawerWidth": {
              "type": "number",
              "markdownDescription": "number\n\nMaximum width (in pixels) for the drawer Minicart when opened.",
              "default": 440
            },
            "openOnHover": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nWhether the popup minicart should open when the user hovers over it.",
              "default": false
            },
            "quantityDisplay": {
              "type": "string",
              "markdownDescription": "enum\n\nShows the quantity badge even when the amount of products in the cart is zero. Possible values are: always or not-empty or never.",
              "default": "not-empty",
              "oneOf": [
                { "const": "always" },
                { "const": "not-empty" },
                { "const": "never" }
              ]
            },
            "itemCountMode": {
              "type": "string",
              "markdownDescription": "enum\n\nQuantity badge behavior when displaying the number of total items added in Minicart. Possible values are: total, distinct, totalAvailable and distinctAvailable.",
              "default": "distinct",
              "oneOf": [
                {
                  "type": "string",
                  "const": "total",
                  "markdownDescription": "Quantity badge displays the number of items added to the cart"
                },
                {
                  "type": "string",
                  "const": "distinct",
                  "markdownDescription": "Only displays the number of different products added to the cart"
                },
                {
                  "type": "string",
                  "const": "totalAvailable",
                  "markdownDescription": "Displays the number of available items added to the cart"
                },
                {
                  "type": "string",
                  "const": "distinctAvailable",
                  "markdownDescription": "Displays the number of different and available products added to the cart"
                }
              ]
            },
            "backdropMode": {
              "type": "string",
              "markdownDescription": "enum\n\nControls whether the backdrop should be displayed when the drawer Minicart is opened or not. Possible values are: visible (rendering the backdrop) or none (rendering the drawer without backdrop).",
              "default": "none",
              "oneOf": [
                {
                  "type": "string",
                  "const": "visible"
                },
                {
                  "type": "string",
                  "const": "none"
                }
              ]
            },
            "MinicartIcon": {
              "type": "string",
              "markdownDescription": "block\n\nIcon displayed in the Minicart button. This prop's value must match the name of the block responsible for rendering the desired icon.",
              "default": "icon-cart"
            },
            "customPixelEventId": {
              "type": "string",
              "markdownDescription": "string\n\nStore event ID responsible for triggering the minicart.v2 to automatically open itself on the interface.",
              "default": ""
            },
            "customPixelEventName": {
              "type": "string",
              "markdownDescription": "string\n\nStore event name responsible for triggering the minicart.v2 to automatically open itself on the interface. Some examples are: 'addToCart' and 'removeFromCart'. Notice that using this prop will make the minicart.v2 open in every event with the specified name if no customPixelEventId is specified.",
              "default": ""
            }
          }
        }
      }
    },

    "logo": {
      "type": "object",
      "additionalProperties": false,
      "title": "Logo",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-logo\n\nLogo is a VTEX block responsible for displaying an image logo for the store header.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "title": {
              "type": "string",
              "markdownDescription": "string!\n\nThe image alt description",
              "default": "VTEX logo"
            },
            "color": {
              "type": "string",
              "markdownDescription": "string\n\nThe image fill color",
              "default": "#F71963"
            },
            "showLabel": {
              "type": "boolean",
              "markdownDescription": "boolean\n\nSet the label visibility",
              "default": true
            },
            "width": {
              "type": "number",
              "markdownDescription": "number\n\nThe logo image width",
              "default": 493
            },
            "height": {
              "type": "number",
              "markdownDescription": "number\n\nThe logo image height",
              "default": 177
            },
            "url": {
              "type": "string",
              "markdownDescription": "string\n\nThe image url",
              "default": ""
            },
            "href": {
              "type": "string",
              "markdownDescription": "string\n\nImage link",
              "default": ""
            }
          }
        }
      }
    },

    "vtex.menu@2.x:menu": {
      "type": "object",
      "additionalProperties": false,
      "title": "Menu",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-menu\n\nVTEX Menu is a store component responsible for displaying a bar containing links and drop-down sub-menus.\n\nTo build the store's menu options, you need to configure the `menu-item` blocks. These can be declared in two different ways in `vtex.menu@2.x:menu`: as `children` or as `props`. The advantage of this latest menu-item configuration compared is that Site Editor can be used to edit the blocks.\n\n`\"vtex.menu@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "orientation": {
              "type": "string",
              "oneOf": [{ "const": "vertical" }, { "const": "horizontal" }]
            },
            "categoryId": {
              "type": "number"
            },
            "textType": {
              "type": "string",
              "oneOf": [
                { "const": "heading1" },
                { "const": "heading2" },
                { "const": "heading3" },
                { "const": "heading4" },
                { "const": "heading5" },
                { "const": "body" },
                { "const": "small" },
                { "const": "mini" }
              ]
            },
            "additionalDef": {
              "type": "string"
            },
            "experimentalOptimizeRendering": {
              "type": "boolean"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/menu-item:props"
              }
            }
          }
        }
      }
    },

    "menu-item": {
      "type": "object",
      "additionalProperties": false,
      "title": "Menu Item",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-menu\n\nVTEX Menu items as blocks.\n\n`\"vtex.menu@2.x\"`",
      "properties": {
        "blocks": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "$ref": "#/definitions/menu-item:props"
        }
      }
    },

    "menu-item:props": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "All available properties for this block.",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "markdownDescription": "string\n\nMenu item type, either category or custom",
          "default": "category",
          "oneOf": [{ "const": "category" }, { "const": "custom" }]
        },
        "id": {
          "type": "string",
          "markdownDescription": "string\n\nMenu item ID",
          "default": ""
        },
        "highlight": {
          "type": "boolean",
          "markdownDescription": "boolean\n\nWhether the item has highlight"
        },
        "iconPosition": {
          "type": "string",
          "markdownDescription": "string\n\nIcon position relative to the menu item text. Either to the left or right",
          "oneOf": [{ "const": "left" }, { "const": "right" }]
        },
        "blockClass": {
          "type": ["array", "string"],
          "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "experimentalOptimizeRendering": {
          "type": "boolean"
        },
        "itemProps": {
          "type": "object"
        }
      },
      "defaultSnippets": [
        {
          "body": {
            "type": "${1|custom,category|}",
            "text": "$0"
          }
        }
      ],
      "if": {
        "properties": {
          "type": {
            "const": "category"
          }
        }
      },
      "then": {
        "properties": {
          "itemProps": {
            "type": "object",
            "additionalProperties": false,
            "markdownDescription": "Item props",
            "properties": {
              "categoryId": {
                "type": "number",
                "markdownDescription": "number\n\nItem category ID"
              },
              "text": {
                "type": "string",
                "markdownDescription": "string\n\nMenu item text",
                "default": ""
              }
            }
          }
        }
      },
      "else": {
        "properties": {
          "itemProps": {
            "type": "object",
            "additionalProperties": false,
            "markdownDescription": "Item props",
            "properties": {
              "text": {
                "type": "string",
                "markdownDescription": "string\n\nMenu item text",
                "default": ""
              },
              "type": {
                "type": "string",
                "markdownDescription": "string\n\nMenu item type, either internal or external",
                "default": "internal",
                "oneOf": [{ "const": "internal" }, { "const": "external" }]
              },
              "href": {
                "type": "string",
                "markdownDescription": "string\n\nIcon view box",
                "default": "0 0 16 16"
              },
              "noFollow": {
                "type": "string",
                "markdownDescription": "string\n\nIcon classname when isActive is true",
                "default": ""
              },
              "tagTitle": {
                "type": "string",
                "markdownDescription": "string\n\nIcon classname when isActive is false",
                "default": ""
              }
            }
          }
        }
      }
    },

    "product-assembly-options": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Customizer",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-customizer\n\nThe Product Customizer allows a product's [attachments](https://help.vtex.com/tutorial/o-que-e-um-anexo--aGICk0RVbqKg6GYmQcWUm) and/or its subscription to be made available and ready to be defined by users on the product details page.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Top level block responsible for displaying the product customizer default component, showing product's attachments. Use this block's children list to define which attachment data you want to display for users.\n\n`\"vtex.product-customizer@2.x\"`",
      "properties": {
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          },
          "default": ["assembly-option-input-values"]
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "initiallyOpened": {
              "type": "string",
              "markdownDescription": "`enum`\n\nBy default, the customization box is opened if the attachment is required and closed if it's not. You can override this behavior by setting this prop to `always`, making it be opened even if the attachment is not required. Leave it as `required` for the default behavior.",
              "default": "required",
              "oneOf": [{ "const": "required" }, { "const": "always" }]
            }
          }
        }
      }
    },

    "assembly-option-input-values": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Customizer (Assembly Option Input Values)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-customizer\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Displays a checkbox or a dropdown list field so users can choose the desired attachment for their products.\n\n`\"vtex.product-customizer@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "optionsDisplay": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefine whether the attachment's pre-defined options will be displayed to be selected in a Checkbox (`box`) or in a dropdown list (`select`).",
              "default": "select",
              "oneOf": [{ "const": "box" }, { "const": "select" }]
            }
          }
        }
      }
    },

    "assembly-option-item-customize": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Customizer (Assembly Option Item Customize)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-customizer\n\nRenders a button `Customize` that when clicked on opens a modal to customize the attachment.\n\n`\"vtex.product-customizer@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "buttonProps": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`enum`\n\nDefines how the `Customize` button will behave. In addition to the `collapse` prop, the `buttonProps` object also receives child blocks to build the content of the modal triggered when the button is clicked on.",
              "properties": {
                "collapse": {
                  "type": "string",
                  "markdownDescription": "`enum`\n\nCustomize button positioning. Possible values are: `left` or `right`.",
                  "default": "left",
                  "oneOf": [{ "const": "left" }, { "const": "right" }]
                },
                "children": {
                  "type": "array",
                  "markdownDescription": "Child blocks to build the content of the modal triggered when the button is clicked on.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },

    "product-list": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nThe Product List component displays all items in the user's cart and informs the user when some of them are unavailable.\n\n![Warning](https://developers.vtex.com/img/emojis/warning.png|width=12px) Currently, the Product List only works with the Minicart v2.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Top level block that must be declared in the `minicart-product-list` block to render a default detailed list with all products added to the shopping cart.\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "blocks": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "itemCountMode": {
              "type": "string",
              "markdownDescription": "`enum`\n\nQuantity badge behavior when displaying the number of total items added in Minicart",
              "default": "distinct",
              "oneOf": [
                {
                  "const": "total",
                  "markdownDescription": "Displays the number of items added to the cart"
                },
                {
                  "const": "distinct",
                  "markdownDescription": "Only displays the number of different products added to the cart"
                },
                {
                  "const": "totalAvailable",
                  "markdownDescription": "Displays the number of available items added to the cart"
                },
                {
                  "const": "distinctAvailable",
                  "markdownDescription": "Only displays the number of different and available products added to the cart"
                }
              ]
            }
          },
          "lazyRenderHeight": {
            "itemCountMode": {
              "type": "number",
              "markdownDescription": "`number`\n\nThe height (px) of each item's loading element.",
              "default": 100
            }
          },
          "lazyRenderOffset": {
            "itemCountMode": {
              "type": "number",
              "markdownDescription": "`number`\n\nThe distance (px) to the bottom of the viewport that each item should be at the moment of it's render.",
              "default": 300
            }
          }
        }
      }
    },

    "product-list-content-desktop": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List (Desktop Layout)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nCreates the product list layout for desktop devices.\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "product-list-content-mobile": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List (Mobile Layout)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nCreates the product list layout for mobile devices.\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "message": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List (Message)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nRenders a message text about the product availability.\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "layout": {
              "type": "string",
              "markdownDescription": "`enum`\n\nAvailability message position on the list.",
              "default": "cols",
              "oneOf": [
                {
                  "const": "rows",
                  "markdownDescription": "Displaying the message in the product row"
                },
                {
                  "const": "cols",
                  "markdownDescription": "Displaying in the product column"
                }
              ]
            }
          }
        }
      }
    },

    "price": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List (Price)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nRenders the product prices.\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "textAlign": {
              "type": "string",
              "markdownDescription": "`string`\n\nProduct price position on the list.",
              "default": "left",
              "oneOf": [
                {
                  "const": "left"
                },
                {
                  "const": "center"
                },
                {
                  "const": "right"
                }
              ]
            }
          },
          "showListPrice": {
            "type": "boolean",
            "markdownDescription": "`boolean`\n\nWhether the product prices should be displayed on the list (`true`) or not (`false`).",
            "default": true
          }
        }
      }
    },

    "unit-price": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List (Unit Price)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nRenders the price for each product unit added to the cart.\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "textAlign": {
              "type": "string",
              "markdownDescription": "`string`\n\nProduct price position on the list.",
              "default": "left",
              "oneOf": [
                {
                  "const": "left"
                },
                {
                  "const": "center"
                },
                {
                  "const": "right"
                }
              ]
            },
            "unitPriceType": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines whether the price type should be displayed. Possible values are: `sellingPrice` or `price`",
              "default": "price",
              "oneOf": [
                {
                  "const": "sellingPrice"
                },
                {
                  "const": "price"
                }
              ]
            },
            "unitPriceDisplay": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines when the unit price should be displayed.",
              "default": "price",
              "oneOf": [
                {
                  "const": "always",
                  "markdownDescription": "Unit price is always displayed"
                },
                {
                  "const": "default",
                  "markdownDescription": "Unit price is only displayed when the number of products is greater than one"
                }
              ]
            },
            "displayUnitListPrice": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines whether the product list price should be displayed or not.",
              "default": "price",
              "oneOf": [
                {
                  "const": "showWhenDifferent",
                  "markdownDescription": "List price is displayed when it is different from the regular price"
                },
                {
                  "const": "notShow",
                  "markdownDescription": "list price is never displayed"
                }
              ]
            }
          }
        }
      }
    },

    "product-list-image": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List (Image)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nProduct image width (in pixels).\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "width": {
              "type": "number",
              "markdownDescription": "`number`\n\nProduct image width (in pixels).",
              "default": 96
            }
          }
        }
      }
    },

    "product-reference": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List (Reference)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nRenders the product reference information.\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "identifierLabel": {
              "type": "number",
              "markdownDescription": "`number`\n\nText label to be displayed to the left of the product reference value.",
              "default": ""
            },
            "identifierOption": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDesired product reference data i.e. product identifier to be displayed. Possible options are: `ProductId`, `ProductSkuItemId`, `ProductReferenceId`, and `ProductSkuReferenceId`.",
              "default": "ProductReferenceId",
              "oneOf": [
                {
                  "const": "ProductId"
                },
                {
                  "const": "ProductSkuItemId"
                },
                {
                  "const": "ProductReferenceId"
                },
                {
                  "const": "ProductSkuReferenceId"
                }
              ]
            }
          }
        }
      }
    },

    "remove-button": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List (Remove Button)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nRenders a button that allows users to remove a product from the list.\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "variation": {
              "type": "string",
              "markdownDescription": "`enum`\n\nVariation for the button visual prominence based on the [VTEX Styleguide](https://styleguide.vtex.com/#/Components/Forms/Button). Possible values are: `primary`, `secondary`, `tertiary`, `inverted-tertiary`, `danger` and `danger-tertiary`.",
              "default": "danger",
              "oneOf": [
                {
                  "const": "primary"
                },
                {
                  "const": "secondary"
                },
                {
                  "const": "tertiary"
                },
                {
                  "const": "inverted-tertiary"
                },
                {
                  "const": "danger"
                },
                {
                  "const": "danger-tertiary"
                }
              ]
            },
            "displayMode": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines how the remove button should be displayed. If you desire to [create a modal in the remove button](https://vtex.io/docs/recipes/templates/creating-modals-using-icons/), use the `icon-button` value.",
              "default": "icon-button",
              "oneOf": [
                {
                  "const": "icon-button",
                  "markdownDescription": "To render an icon button"
                },
                {
                  "const": "text-button",
                  "markdownDescription": "To render a text message button"
                }
              ]
            }
          }
        }
      }
    },

    "quantity-selector": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product List (Quantity Selector)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-list\n\nRenders a selector that allows users to add a chosen number of a product in their cart.\n\n`\"vtex.product-list@0.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "mode": {
              "type": "string",
              "markdownDescription": "`enum`\n\nMode of the quantity selector input.",
              "default": "default",
              "oneOf": [
                {
                  "const": "default",
                  "markdownDescription": "On the default mode, the quantity stepper will initially render a dropdown component, and after the quantity exceeds 10, it will switch to an input."
                },
                {
                  "const": "stepper",
                  "markdownDescription": "In the stepper mode it will always render a numeric stepper component."
                }
              ]
            },
            "quantitySelectorStep": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines how the number of products that have `unitMultiplier` will works.",
              "default": "unitMultiplier",
              "oneOf": [
                {
                  "const": "singleUnit",
                  "markdownDescription": "The quantity will be not affected with the `unitMultiplier`"
                },
                {
                  "const": "unitMultiplier",
                  "markdownDescription": "The quantity will be affected with the `unitMultiplier`"
                }
              ]
            }
          }
        }
      }
    },

    "search-bar": {
      "type": "object",
      "additionalProperties": false,
      "title": "Search Bar",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-searchbar\n\nSearch Bar is a VTEX Component that shows a search bar with autocomplete options and displays the matching products as well. This component can be imported and used by any VTEX App.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "attemptPageTypeSearch": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nIf `true` when clicked on result link of brand, department or category will link to the corresponding brand, department or category page. When `false` will always go to a full text search page.",
              "default": false
            },
            "autocompleteAlignment": {
              "type": "string",
              "markdownDescription": "`enum`\n\nAutocomplete Horizontal alignment.",
              "default": "left",
              "oneOf": [
                {
                  "const": "center"
                },
                {
                  "const": "left"
                },
                {
                  "const": "right"
                }
              ]
            },
            "autocompleteFullWidth": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nIf `true`, the autocomplete will fill the whole window horizontally.",
              "default": false
            },
            "autoFocus": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nDefine if the search input should autofocus or not",
              "default": false
            },
            "blurOnSubmit": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nDefine if input should blur on submit.",
              "default": false
            },
            "compactMode": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nDefine when to use the compact version of the component",
              "default": false
            },
            "customSearchPageUrl": {
              "type": "string",
              "markdownDescription": "`string`\n\nTemplate for a custom url. It can have a substring `${term}` used as placeholder to interpolate the searched term. (e.g. `/search?query=${term}`)",
              "default": false
            },
            "displayMode": {
              "type": "string",
              "markdownDescription": "`DisplayMode`\n\nDefine the component display mode, such as which buttons should be visible.",
              "default": "clear-button",
              "oneOf": [
                {
                  "const": "clear-button",
                  "markdownDescription": "Empty state:\n\n![](https://user-images.githubusercontent.com/12702016/74764904-5cc5e580-5261-11ea-9df8-484cf457c266.png|height=22px)\n\nFilled state:\n\n![](https://user-images.githubusercontent.com/12702016/74764917-60f20300-5261-11ea-8911-11c8fd9582d9.png|height=22px)"
                },
                {
                  "const": "search-and-clear-buttons",
                  "markdownDescription": "Empty state:\n\n![](https://user-images.githubusercontent.com/12702016/74764924-62bbc680-5261-11ea-9f1d-2118274da996.png|height=22px)\n\nFilled state:\n\n![](https://user-images.githubusercontent.com/12702016/74764928-64858a00-5261-11ea-9ed2-42da887e6641.png|height=22px)"
                },
                {
                  "const": "search-button",
                  "markdownDescription": "Empty state:\n\n![](https://user-images.githubusercontent.com/12702016/74764929-65b6b700-5261-11ea-815c-ecc9f0c44e0f.png|height=22px)\n\nFilled state:\n\n![](https://user-images.githubusercontent.com/12702016/74764934-66e7e400-5261-11ea-8a86-59da9a1c0faa.png|height=22px)"
                }
              ]
            },
            "emptyPlaceholder": {
              "type": "string",
              "markdownDescription": "`string!`\n\nShows a placeholder when the ResultList hasn't results to displayed",
              "default": ""
            },
            "hasIconLeft": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nDefine if the search icon is on left or right position",
              "default": false
            },
            "maxWidth": {
              "type": ["number", "string"],
              "markdownDescription": "`number | string`\n\nMax width of the search bar. If value is a`string`, it must be succeeded by `px`, `em`, `%` etc."
            },
            "minSearchTermLength": {
              "type": "number",
              "markdownDescription": "`number`\n\nIf defined, it will block searches where the term length is lesser than `minSearchTermLength`."
            },
            "openAutocompleteOnFocus": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nDefine if autocomplete should be open on input focus or not.",
              "default": false
            },
            "placeholder": {
              "type": "string",
              "markdownDescription": "`string!`\n\nPlaceholder to be used on the input",
              "default": ""
            },
            "inputType": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines the value for the `type` HTML attribute (from the `<input>` field). Possible values are: `search` and `text`. We strongly recommend you to use `search` as it fixes some iOS issues. The `text` value is only kept as default for backwards compatibility.",
              "default": "text",
              "oneOf": [{ "const": "search" }, { "const": "text" }]
            },
            "containerMode": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines how the autocomplete component should be displayed",
              "default": "overlay",
              "oneOf": [
                {
                  "const": "overlay",
                  "markdownDescription": "Suggestions overlapping other components"
                },
                {
                  "const": "container",
                  "markdownDescription": "Displays the suggestion within a container"
                }
              ]
            },
            "disableBlurAndTouchEndHandler": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nThe autocomplete can have touchable/clickable components. Interacting with those components may trigger blur and touch events that will close the autocomplete. When set to true, this prop will disable those handlers.",
              "default": false
            }
          }
        }
      }
    },

    "back-to-top-button": {
      "type": "object",
      "additionalProperties": false,
      "title": "Back To Top Button",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-backtotopbutton\n\n`back-to-top-button` is a store block exported by the Store Components app that redirects users to the top of the page when clicked on.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "displayThreshold": {
              "type": "number",
              "markdownDescription": "`number`\n\nDefines the window Y pixel in which the button will be displayed.",
              "default": 600
            },
            "display": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines the component rendering.",
              "default": "button",
              "oneOf": [
                {
                  "const": "button",
                  "markdownDescription": "Displays a button with a `Back To Top` label text"
                },
                {
                  "const": "caret-icon",
                  "markdownDescription": "Displays just an icon."
                }
              ]
            }
          }
        }
      }
    },

    "image": {
      "type": "object",
      "additionalProperties": false,
      "title": "Image",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-image\n\nThe `Image` is a VTEX block that allows to add any image in the store. It can also be used as `image-new`, from `Store Image` app.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "$ref": "#/definitions/image:props"
        }
      }
    },

    "image-new": {
      "type": "object",
      "additionalProperties": false,
      "title": "Image (from Store Image)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-image\n\nThe `Image` is a VTEX block that allows to add any image in the store.\n\n`\"vtex.store-image@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "$ref": "#/definitions/image:props"
        }
      }
    },

    "image:props": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "All available properties for this block.",
      "required": ["src"],
      "properties": {
        "blockClass": {
          "type": ["array", "string"],
          "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "src": {
          "type": "string",
          "markdownDescription": "`string!`\n\nSpecifies the URL of an image",
          "default": ""
        },
        "alt": {
          "type": "string",
          "markdownDescription": "`string`\n\nSpecifies an alternate text for an image",
          "default": ""
        },
        "width": {
          "type": ["number", "string"],
          "markdownDescription": "`number | string`\n\nSpecifies the width of an image. If value is a`string`, it must be succeeded by `px`, `em`, `%` etc.",
          "default": 0
        },
        "height": {
          "type": ["number", "string"],
          "markdownDescription": "`number | string`\n\nSpecifies the height of an image. If value is a`string`, it must be succeeded by `px`, `em`, `%` etc.",
          "default": 0
        },
        "maxWidth": {
          "type": ["number", "string"],
          "markdownDescription": "`number | string`\n\nSpecifies the max width of an image. If value is a`string`, it must be succeeded by `px`, `em`, `%` etc.",
          "default": 0
        },
        "maxHeight": {
          "type": ["number", "string"],
          "markdownDescription": "`number | string`\n\nSpecifies the max height of an image. If value is a`string`, it must be succeeded by `px`, `em`, `%` etc.",
          "default": 0
        },
        "minWidth": {
          "type": ["number", "string"],
          "markdownDescription": "`number | string`\n\nSpecifies the min width of an image. If value is a`string`, it must be succeeded by `px`, `em`, `%` etc.",
          "default": 0
        },
        "minHeight": {
          "type": ["number", "string"],
          "markdownDescription": "`number | string`\n\nSpecifies the min height of an image. If value is a`string`, it must be succeeded by `px`, `em`, `%` etc.",
          "default": 0
        },
        "srcset": {
          "type": "string",
          "markdownDescription": "`string`\n\nSpecifies the URL of the image to use in different situations. [(Example on how to use srcset and sizes attributes)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes#html)",
          "default": ""
        },
        "sizes": {
          "type": "string",
          "markdownDescription": "`string`\n\nSpecifies image sizes for different page layouts. [(Example on how to use srcset and sizes attributes)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes#html)",
          "default": ""
        },
        "title": {
          "type": "string",
          "markdownDescription": "`string`\n\nTitle to be shown on hover",
          "default": ""
        },
        "link": {
          "type": "object",
          "markdownDescription": "`object`\n\nSpecifies the link the image will redirect when clicked on",
          "required": ["url"],
          "properties": {
            "url": {
              "type": "string",
              "markdownDescription": "`string`\n\nURL users will be redirected to when clicking on the image.",
              "default": ""
            },
            "openNewTab": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether a new tab on browser will be opened (`true`) or not (`false`)."
            },
            "attributeTitle": {
              "type": "string",
              "markdownDescription": "`string`\n\nSpecifies the link `title` attribute"
            },
            "attributeNofollow": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nSpecifies the link the image will redirect when clicked on",
              "default": false
            }
          }
        }
      }
    },

    "info-card": {
      "type": "object",
      "additionalProperties": false,
      "title": "Info Card",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-infocard\n\nThe `infoCard` block allows you to display content combining image and text in your store.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "isFullModeStyle": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nIf true, image provided will be used as a background image and text will be displayed over it.",
              "default": false
            },
            "textPosition": {
              "type": "string",
              "markdownDescription": "`enum`\n\nChoose in which position of the component text will be displayed, left, center or right.",
              "default": "left",
              "oneOf": [
                {
                  "const": "left",
                  "markdownDescription": "Text will be to the left. If `isFullModeStyle` is false, image will be on the right"
                },
                {
                  "const": "center",
                  "markdownDescription": "Text will be in the center. Not applicable if `isFullModeStyle` is false."
                },
                {
                  "const": "right",
                  "markdownDescription": "Text will be to the right. If `isFullModeStyle` is false, image will be on the left"
                }
              ]
            },
            "textAlignment": {
              "type": "string",
              "markdownDescription": "`enum`\n\nControl the text alignment inside component. This prop is ignored if isFullModeStyle is true.",
              "default": "left",
              "oneOf": [
                {
                  "const": "left",
                  "markdownDescription": "Text alignment will be to the left."
                },
                {
                  "const": "center",
                  "markdownDescription": "Text alignment will be to the center."
                },
                {
                  "const": "right",
                  "markdownDescription": "Text alignment will be to the right."
                }
              ]
            },
            "headline": {
              "type": "string",
              "markdownDescription": "`string`\n\nText to be used as headline. If not provided, it will not be rendered.",
              "default": ""
            },
            "subhead": {
              "type": "string",
              "markdownDescription": "`string`\n\nText to be displayed underneath the headline. If not provided, it will not be rendered.",
              "default": ""
            },
            "textMode": {
              "type": "string",
              "markdownDescription": "`enum`\n\nChooses which text mode should be used to process the text from `headline` and `subhead` props.",
              "default": "html",
              "oneOf": [
                {
                  "const": "html",
                  "markdownDescription": "The InfoCard component will expect to receive HTML text for `headline` and `subhead` props."
                },
                {
                  "const": "rich-text",
                  "markdownDescription": "The InfoCard component will expect to receive Markdown text for `headline` and `subhead` props, and will use the [rich-text block](https://github.com/vtex-apps/rich-text) to render both."
                }
              ]
            },
            "callToActionMode": {
              "type": "string",
              "markdownDescription": "`enum`\n\nSet Call to Action component mode.",
              "default": "button",
              "oneOf": [
                {
                  "const": "none",
                  "markdownDescription": "`string`\n\nDon't render any Call to Action component"
                },
                {
                  "const": "button",
                  "markdownDescription": "`string`\n\nCall to Action component will be a button"
                },
                {
                  "const": "link",
                  "markdownDescription": "`string`\n\nCall to Action component will be a text in a link format"
                }
              ]
            },
            "callToActionText": {
              "type": "string",
              "markdownDescription": "`string`\n\nText to be displayed inside the CTA component.",
              "default": ""
            },
            "callToActionUrl": {
              "type": "string",
              "markdownDescription": "`string`\n\nURL to be redirected when CTA component is clicked.",
              "default": ""
            },
            "callToActionLinkTarget": {
              "type": "string",
              "markdownDescription": "`enum`\n\nWhere to display the linked URL when CTA component is clicked. These values are the same ones supported by HTML5 anchor tags. For more information check its documentation at [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a).",
              "default": "_self",
              "oneOf": [
                {
                  "const": "_self",
                  "markdownDescription": "Open the link in the current browsing context."
                },
                {
                  "const": "_blank",
                  "markdownDescription": "Open the link in a new tab, but users can configure browsers to open a new window instead."
                },
                {
                  "const": "_parent",
                  "markdownDescription": "Open the link in the parent browsing context of the current one. If no parent, behaves as `_self`."
                },
                {
                  "const": "_top",
                  "markdownDescription": "Open the link in the topmost browsing context (the 'highest' context thatâ€™s an ancestor of the current one). If no ancestors, behaves as `_self`."
                }
              ]
            },
            "imageUrl": {
              "type": "string",
              "markdownDescription": "`string`\n\nURL of the image to be used on desktop.",
              "default": ""
            },
            "mobileImageUrl": {
              "type": "string",
              "markdownDescription": "`string`\n\nURL of the image to be used on mobile. If you do not provide any, the desktop image url will be used.",
              "default": ""
            },
            "htmlId": {
              "type": "string",
              "markdownDescription": "`string`\n\nAdds an ID to the container element.",
              "default": ""
            },
            "linkTarget": {
              "type": "string",
              "markdownDescription": "`enum`\n\nWhere to display the linked URL when info-card block is clicked. These values are the same ones supported by HTML5 anchor tags. For more information check its documentation at [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a).",
              "default": "_self",
              "oneOf": [
                {
                  "const": "_self",
                  "markdownDescription": "Open the link in the current browsing context."
                },
                {
                  "const": "_blank",
                  "markdownDescription": "Open the link in a new tab, but users can configure browsers to open a new window instead."
                },
                {
                  "const": "_parent",
                  "markdownDescription": "Open the link in the parent browsing context of the current one. If no parent, behaves as `_self`."
                },
                {
                  "const": "_top",
                  "markdownDescription": "Open the link in the topmost browsing context (the 'highest' context thatâ€™s an ancestor of the current one). If no ancestors, behaves as `_self`."
                }
              ]
            }
          }
        }
      }
    },

    "sku-selector": {
      "type": "object",
      "additionalProperties": false,
      "title": "SKU Selector",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-skuselector\n\nThe SKU Selector is a product details page block responsible for displaying every SKU available for a given product.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "$ref": "#/definitions/sku-selector:props"
        }
      }
    },

    "sku-selector:props": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "All available properties for this block.",
      "properties": {
        "blockClass": {
          "type": ["array", "string"],
          "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "visibility": {
          "type": "string",
          "markdownDescription": "`enum`\n\nDefines the scenarios in which the SKU selector should be displayed.",
          "default": "",
          "oneOf": [
            {
              "const": "always",
              "markdownDescription": "It will always be displayed even if the product has only one SKU option"
            },
            {
              "const": "more-than-one",
              "markdownDescription": "The SKU Selector is only displayed when the product has more than one SKU option"
            }
          ]
        },
        "visibleVariations": {
          "type": "array",
          "markdownDescription": "`array`\n\nSpecifies which product variations should be displayed in the product details page. Notice the following: if you declare a name that doesn't represent a real product variation or an empty array, no variations will be displayed.",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "hideImpossibleCombinations": {
          "type": "boolean",
          "markdownDescription": "`boolean`\n\nWhether a product variation that leads to an impossible product combination should be clickable (`true`) or not (`false`). Notice that in both scenarios the variation will be displayed. However, when the prop is set as `false`, the variation is faded displayed (with less opacity).",
          "default": true
        },
        "disableUnavailableSelectOptions": {
          "type": "boolean",
          "markdownDescription": "`boolean`\n\nWhether a product variation that leads to an impossible product combination should be displayed with the disabled attribute when `displayMode` is set to `select`. By default, all select options are without the disabled attribute set based on the type of variation",
          "default": false
        },
        "maxItems": {
          "type": "number",
          "markdownDescription": "`number`\n\nMaximum number of variation items to be displayed in the SKU Selector before the See more button. The button will always be displayed 2 items before the number set in maxItems.",
          "default": 10
        },
        "showValueForVariation": {
          "type": "string",
          "markdownDescription": "`enum`\n\nDisplays a value for the selected variation. This prop replaces the former `showValueNameForImageVariation` (deprecated).",
          "default": "none",
          "oneOf": [
            {
              "const": "none",
              "markdownDescription": "No values are displayed when the variation is selected"
            },
            {
              "const": "image",
              "markdownDescription": "Displays only the image value for the selected variation, if any"
            },
            {
              "const": "more-than-one",
              "markdownDescription": "All variation values are displayed"
            }
          ]
        },
        "variationsSpacing": {
          "type": "number",
          "markdownDescription": "`number`\n\nDefines the `margin-bottom` size to be applied in the rendered product variations. Possible values are from `0` to `11` (the prop value is not in `px`, every value represents a tachyons class).",
          "default": 7
        },
        "showVariationsErrorMessage": {
          "type": "boolean",
          "markdownDescription": "`boolean`\n\nWhether an error message should be displayed whenever the `BuyButton` is clicked on but no available variation was selected (`true`) or not (`false`).",
          "default": true
        },
        "showVariationsLabels": {
          "type": "string",
          "markdownDescription": "`enum`\n\nWhere variation names should be displayed.",
          "default": "variation",
          "oneOf": [
            {
              "const": "none",
              "markdownDescription": "Doesn't display the variation names"
            },
            {
              "const": "variation",
              "markdownDescription": "Shows the variation name as a header of the items"
            },
            {
              "const": "itemValue",
              "markdownDescription": "Displays the variation name before with each item's value"
            },
            {
              "const": "variationAndItemValue",
              "markdownDescription": "Behaves as `variation` and `itemValue` at the same time"
            }
          ]
        },
        "displayMode": {
          "type": ["string", "object"],
          "additionalProperties": false,
          "markdownDescription": "`enum`\n\nDefines how the product variation names will be displayed (it doesn't apply to product variation images). Notice that this prop is responsive, so you can declare an object as its value specifying a value for each breakpoint (`desktop` and `mobile`).",
          "default": "default",
          "oneOf": [
            {
              "const": "default",
              "markdownDescription": "Displays all variation names"
            },
            {
              "const": "select",
              "markdownDescription": "Only displays the selected variation name"
            },
            {
              "const": "slider",
              "markdownDescription": "Displays all variation names in a slider when the number of available options in greater than the value defined in the `sliderDisplayThreshold` prop"
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "desktop": {
                  "$ref": "#/definitions/sku-selector:displayMode"
                },
                "mobile": {
                  "$ref": "#/definitions/sku-selector:displayMode"
                }
              }
            }
          ],
          "properties": {
            "desktop": {
              "$ref": "#/definitions/sku-selector:displayMode"
            },
            "mobile": {
              "$ref": "#/definitions/sku-selector:displayMode"
            }
          }
        },
        "sliderDisplayThreshold": {
          "type": "number",
          "markdownDescription": "`number`\n\nMinimum number of product variation names that should be displayed using `slider` display mode. This prop only properly works when `displayMode` is set as `slider`.",
          "default": 3
        },
        "sliderArrowSize": {
          "type": "number",
          "markdownDescription": "`number`\n\nControls the size (height and width) in pixels of the navigation arrows rendered when `displayMode` is set as `slider`.",
          "default": 12
        },
        "sliderItemsPerPage": {
          "type": "object",
          "markdownDescription": "`object`\n\nControls how many slides should be shown on each type of device when `displayMode` is set as `slider`.",
          "additionalProperties": false,
          "properties": {
            "desktop": {
              "type": "number",
              "markdownDescription": "`number`\n\nnumber of slides to be displayed on desktop devices when `displayMode` is set as `slider`.",
              "default": 3
            },
            "tablet": {
              "type": "number",
              "markdownDescription": "`number`\n\nnumber of slides to be displayed on tablet devices when `displayMode` is set as `slider`.",
              "default": 2
            },
            "mobile": {
              "type": "number",
              "markdownDescription": "`number`\n\n number of slides to be displayed on phone devices when `displayMode` is set as `slider`.",
              "default": 1
            }
          }
        },
        "thumbnailImage": {
          "type": "string",
          "markdownDescription": "`string`\n\nFirst image to be displayed. This prop value must be the same text string defined in the desired product image's `imageLabel` field (from the Catalog module). If you use this prop and no image declaring the same text string in its `imageLabel` field is found, any product image will be randomly rendered instead.",
          "default": ""
        },
        "imageHeight": {
          "type": ["number", "object"],
          "additionalProperties": false,
          "markdownDescription": "`number | object`\n\nHeight (in `px`) of the product thumbnail image. You can declare an object as its value in case you want to define a height for each device (`desktop` and `mobile`).",
          "properties": {
            "desktop": {
              "type": "number"
            },
            "mobile": {
              "type": "number"
            }
          }
        },
        "imageWidth": {
          "type": ["number", "object"],
          "additionalProperties": false,
          "markdownDescription": "`number | object`\n\nWidth (in `px`) of the product thumbnail image. You can declare an object as its value in case you want to define a width for each device (`desktop` and `mobile`).",
          "properties": {
            "desktop": {
              "type": "number"
            },
            "mobile": {
              "type": "number"
            }
          }
        },
        "initialSelection": {
          "type": "string",
          "markdownDescription": "`enum`\n\nControls the user initial selection for available variations when product page is fully loaded.",
          "default": "complete",
          "oneOf": [
            {
              "const": "complete",
              "markdownDescription": "Selects the first available SKU's variation values"
            },
            {
              "const": "image",
              "markdownDescription": "Selects the first available image variation"
            },
            {
              "const": "empty",
              "markdownDescription": "No variations will be selected when the page is loaded"
            }
          ]
        }
      }
    },

    "sku-selector:displayMode": {
      "type": "string",
      "oneOf": [
        {
          "const": "default",
          "markdownDescription": "Displays all variation names"
        },
        {
          "const": "select",
          "markdownDescription": "Only displays the selected variation name"
        },
        {
          "const": "slider",
          "markdownDescription": "Displays all variation names in a slider when the number of available options in greater than the value defined in the `sliderDisplayThreshold` prop"
        }
      ]
    },

    "notification.bar": {
      "type": "object",
      "additionalProperties": false,
      "title": "Notification (Bar)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-notification\n\n`Notification` is a VTEX component allows you to display a text content in a bar style or inline. This Component can be imported and used by any VTEX app.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "content": {
              "type": "string",
              "markdownDescription": "`string`\n\nText to be used in the bar.",
              "default": ""
            }
          }
        }
      }
    },

    "notification.inline": {
      "type": "object",
      "additionalProperties": false,
      "title": "Notification (Inline)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-notification\n\n`Notification` is a VTEX component allows you to display a text content in a bar style or inline. This Component can be imported and used by any VTEX app.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "content": {
              "type": "string",
              "markdownDescription": "`string`\n\nText to be used in the bar.",
              "default": ""
            }
          }
        }
      }
    },

    "product-brand": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Brand",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-productbrand\n\nThe `ProductBrand` is a VTEX block that displays either the name or the logo of a product's brand.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "displayMode": {
              "type": "string",
              "markdownDescription": "`string`\n\nYou should choose between `logo` or `text`. This will define if the product brand will be displayed by name or logo.",
              "default": "logo",
              "oneOf": [{ "const": "logo" }, { "const": "text" }]
            },
            "fallbackToText": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nThis prop should only be used when `displayMode` is set to `logo`. It defines what should be done when the Product Brand was set to display a brand logo but no image was registered in the VTEX admin's Catalog. This prop is set as `true` by default, allowing the logo to be replaced with the brand name in those scenarios. When set as `false`, the store will not show the brand name instead of the brand logo.",
              "default": true
            },
            "loadingPlaceholder": {
              "type": "string",
              "markdownDescription": "`string`\n\nYou should choose between `logo` or `text`. This will define if the loading placeholder should have the size of the logo or the text.",
              "oneOf": [
                {
                  "const": "logo"
                },
                {
                  "const": "text"
                }
              ]
            },
            "height": {
              "type": "number",
              "markdownDescription": "`number`\n\nIt sets the logo height. It should only be used when `displayMode` is set to `logo`.",
              "default": 100,
              "oneOf": [
                {
                  "const": "logo"
                },
                {
                  "const": "text"
                }
              ]
            },
            "excludeBrands": {
              "type": "array",
              "markdownDescription": "`array`\n\nThe brand names or brand IDs listed in the array will never be displayed by the Brand component. It is usually useful to hide default or test brand names/logos on the store front.",
              "default": [],
              "items": {
                "type": "string"
              }
            },
            "withLink": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines the scenarios in which the product brand should have a link that leads to its website.",
              "default": "none",
              "oneOf": [
                {
                  "const": "none",
                  "markdownDescription": "`array`\n\nNever includes the link"
                },
                {
                  "const": "logo",
                  "markdownDescription": "`array`\n\nIncludes the link whenever the brand logo is displayed"
                },
                {
                  "const": "text",
                  "markdownDescription": "`array`\n\nIncludes the link whenever the brand name is displayed"
                },
                {
                  "const": "logoAndText",
                  "markdownDescription": "`array`\n\nIncludes the link whenever the brand logo or the brand name is displayed"
                }
              ]
            },
            "brandName": {
              "type": "string",
              "markdownDescription": "`string`\n\nThe brand name. If no value is declared, the product context should provide the data.",
              "default": ""
            },
            "brandId": {
              "type": "number",
              "markdownDescription": "`number`\n\nThe brand ID. If no value is declared, the product context should provide the data.",
              "default": ""
            }
          }
        }
      }
    },

    "product-description": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Description",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-productdescription\n\n`ProductDescription` is a VTEX block that displays the description of a product. This Component can be imported and used by any VTEX App.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "collapseContent": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nIf `true`, whenever the product description is too big, it will collapse and show a *Show More* button. When `false`, it will never collapse and will always show the whole description.",
              "default": true
            },
            "title": {
              "type": "string",
              "markdownDescription": "`string`\n\nDefines a custom title for the description section.",
              "default": ""
            },
            "showTitle": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nDefine whether or not to show the title.",
              "default": true
            }
          }
        }
      }
    },

    "product-name": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Name",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-productname\n\nThe `ProductName` is a block responsible for **displaying the product name** along other information such as **SKU** or **brand**.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "showSku": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nShow product SKU",
              "default": false
            },
            "showProductReference": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nShow product reference",
              "default": false
            },
            "showBrandName": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nShow brand name",
              "default": false
            },
            "displayMode": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nPossible values: `linkToProductPage` (show the product link associated with its name) or `plainText` (to show only the product name).",
              "default": "plainText",
              "oneOf": [
                {
                  "const": "linkToProductPage",
                  "markdownDescription": "`array`\n\nShow the product link associated with its name"
                },
                {
                  "const": "plainText",
                  "markdownDescription": "`array`\n\nShow only the product name"
                }
              ]
            }
          }
        }
      }
    },

    "product-images": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Images",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-productimages\n\n`ProductImages` is a VTEX block responsible for rendering a product image or video.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "aspectRatio": {
              "type": "string",
              "markdownDescription": "`string`\n\nSets the aspect ratio of the image, that is, whether the image should be square, portrait, landscape, etc. The value should follow the [common aspect ratio notation](https://en.wikipedia.org/wiki/Aspect_ratio_(image)) i.e. two numbers separated by a colon such as `1:1` for square, `3:4` for upright portrait, or `1920:1080` for even large values.",
              "default": "auto"
            },
            "contentOrder": {
              "type": "string",
              "markdownDescription": "`string`\n\nControls the order in which the images and videos are displayed.",
              "default": "images-first",
              "oneOf": [
                {
                  "const": "images-first"
                },
                {
                  "const": "videos-first"
                }
              ]
            },
            "displayThumbnailsArrows": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nDisplays navigation arrows on the thumbnails media (if there are enough thumbnails for them to scroll)",
              "default": false
            },
            "placeholder": {
              "type": "string",
              "markdownDescription": "`string`\n\nSets the URL for a placeholder image to be used in case there is no available image or video of the product.",
              "default": ""
            },
            "hiddenImages": {
              "type": "string",
              "markdownDescription": "`string`\n\nHides images whose labels match the values listed in this prop. Intended to be used along with the `product-summary-sku-selector` block. You can have more information at the [SKU Selector](https://vtex.io/docs/components/all/vtex.store-components/sku-selector) documentation",
              "default": "skuvariation"
            },
            "maxHeight": {
              "type": "number",
              "markdownDescription": "`number`\n\nMaximum height for individual product images (in pixels).",
              "default": 600
            },
            "position": {
              "type": "number",
              "markdownDescription": "`number`\n\nSet the position of the thumbnails (`left` or `right`). Only used when `thumbnailsOrientation` is `vertical`",
              "default": "left",
              "oneOf": [
                {
                  "const": "left"
                },
                {
                  "const": "right"
                }
              ]
            },
            "showNavigationArrows": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nControls if the navigation arrows should appear`",
              "default": true
            },
            "showPaginationDots": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nControls if the pagination dots should appear`",
              "default": true
            },
            "thumbnailAspectRatio": {
              "type": "string",
              "markdownDescription": "`string`\n\nSets the aspect ratio of the thumbnail image; For more information about aspect ratio, check the `aspectRatio` prop",
              "default": "auto"
            },
            "thumbnailMaxHeight": {
              "type": "number",
              "markdownDescription": "`number`\n\nMaximum height for the thumbnail image (in pixels).",
              "default": 150
            },
            "thumbnailsOrientation": {
              "type": "string",
              "markdownDescription": "`enum`\n\nChoose the orientation of the thumbnails. Can be set to `vertical` or `horizontal`",
              "default": "vertical",
              "oneOf": [
                {
                  "const": "vertical"
                },
                {
                  "const": "horizontal"
                }
              ]
            },
            "zoomFactor": {
              "type": "number",
              "markdownDescription": "`number`\n\nSets how much the zoom increases the image size (e.g. `2` will make the zoomed-in image twice as large)",
              "default": 2
            },
            "zoomMode": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines the image zoom behavior.",
              "default": "in-place-click",
              "oneOf": [
                {
                  "const": "disabled",
                  "markdownDescription": "Zoom is disabled"
                },
                {
                  "const": "in-place-click",
                  "markdownDescription": "Zoom will be triggered when the image is clicked on"
                },
                {
                  "const": "in-place-hover",
                  "markdownDescription": "Zoom will be triggered when the image is hovered on"
                },
                {
                  "const": "open-modal",
                  "markdownDescription": "Image is zoomed using a modal"
                }
              ]
            },
            "ModalZoom": {
              "type": "string",
              "markdownDescription": "`block`\n\nOpens a modal for product image zooming. This prop's value must match the name of the block responsible for triggering the modal containing the product image for zooming (e.g. `modal-layout` from (Modal layout)[https://vtex.io/docs/components/all/vtex.modal-layout/] app). Notice that the `ModalZoom` prop will work only if the `zoomMode` prop is set as `open-modal`. To learn more, check out the [Advanced Configuration](https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-productimages#advanced-configuration).",
              "default": ""
            },
            "displayMode": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines how the product media should be displayed",
              "default": "carousel",
              "oneOf": [
                {
                  "const": "carousel",
                  "markdownDescription": "Displays the product images and videos in a carousel"
                },
                {
                  "const": "list",
                  "markdownDescription": "Displays only the product images inline, with no extra markup. *Caution*: The `list` value does not display product videos and it is only compatible with the `maxHeight`, `hiddenImages`, `zoomFactor`, `aspectRatio`,`ModalZoomElement`, and `zoomMode` props."
                }
              ]
            }
          }
        }
      }
    },

    "share": {
      "type": "object",
      "additionalProperties": false,
      "title": "Share",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-share\n\n`Share` is a VTEX component that allows to share a product url via social medias. This component can be imported and used by any VTEX app.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "shareLabelClass": {
              "type": "string",
              "markdownDescription": "`string`\n\nThe share label classes",
              "default": true
            },
            "buttonsContainerClass": {
              "type": "string",
              "markdownDescription": "`string`\n\nThe button container classes",
              "default": true
            },
            "options": {
              "type": "object",
              "markdownDescription": "`object`\n\nShare button options, like *size*",
              "additionalProperties": false,
              "default": {},
              "properties": {
                "size": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nThe size of the share button in pixels"
                }
              }
            },
            "social": {
              "type": "object",
              "markdownDescription": "`object`\n\nThe possible social medias to be displayed",
              "additionalProperties": false,
              "default": {
                "Facebook": true,
                "Twitter": true,
                "WhatsApp": true,
                "Pinterest": true,
                "Telegram": false,
                "E-mail": false
              },
              "properties": {
                "Facebook": {
                  "type": "boolean"
                },
                "Twitter": {
                  "type": "boolean"
                },
                "WhatsApp": {
                  "type": "boolean"
                },
                "Pinterest": {
                  "type": "boolean"
                },
                "Telegram": {
                  "type": "boolean"
                },
                "E-mail": {
                  "type": "boolean"
                }
              }
            },
            "imageUrl": {
              "type": "string",
              "markdownDescription": "`string`\n\nImage url to share in social medias",
              "default": ""
            }
          }
        }
      }
    },

    "shipping-simulator": {
      "type": "object",
      "additionalProperties": false,
      "title": "Shipping Simulator",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-shippingsimulator\n\nThe Shipping Simulator block **estimates the shipping fee** based on a zip code input.\n\n`\"vtex.store-components@3.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "skuId": {
              "type": "string",
              "markdownDescription": "`string`\n\nID of the current product SKU",
              "default": ""
            },
            "seller": {
              "type": "string",
              "markdownDescription": "`string`\n\nID of the product seller",
              "default": ""
            },
            "pricingMode": {
              "type": "string",
              "markdownDescription": "`enum`\n\nIf the product has gifts or attachments, for example, you can choose whether the shipping information will be grouped (`grouped`) by shipping type or showing the shipping prices for each of the items individually (`individualItems`).",
              "default": "individualItems",
              "oneOf": [
                {
                  "const": "grouped"
                },
                {
                  "const": "individualItems"
                }
              ]
            },
            "shouldUpdateOrderForm": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether interacting with the simulator should update the shopper's address in their orderForm",
              "default": true
            }
          }
        }
      }
    },

    "modal-trigger": {
      "type": "object",
      "additionalProperties": false,
      "title": "Modal Layout (Trigger)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-modal-layout\n\nThe Modal Layout app provides blocks that can help you create modals in your store.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Defines how the Modal content will be triggered through its children blocks.\n\n`\"vtex.modal-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "trigger": {
              "type": "string",
              "markdownDescription": "`enum`\n\nWhether the Modal content should be triggered by user click (`click`), when the page is fully loaded (`load`) or when the page is fully loaded but the modal will appears just once per session (`load-session`).",
              "default": "click",
              "oneOf": [
                {
                  "const": "click"
                },
                {
                  "const": "load"
                },
                {
                  "const": "load-session"
                }
              ]
            },
            "customPixelEventId": {
              "type": "string",
              "markdownDescription": "`string`\n\nStore event ID responsible for triggering the `modal-trigger` block (hence triggering the opening of `modal-layout` blocks on the interface as well).",
              "default": ""
            },
            "customPixelEventName": {
              "type": "string",
              "markdownDescription": "`string`\n\nStore event name responsible for triggering the `modal-trigger` block (hence triggering the opening of `modal-layout` blocks on the interface as well). Some examples are: `addToCart` and 'removeFromCart` events. Notice that using this prop will make the associated `modal-layout` open in **every** event with the specified name if no `customPixelEventId` is specified.",
              "default": ""
            }
          }
        }
      }
    },

    "modal-header": {
      "type": "object",
      "additionalProperties": false,
      "title": "Modal Layout (Header)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-modal-layout\n\nThe Modal Layout app provides blocks that can help you create modals in your store.\n\nRenders a close button and the blocks listed as its children, building a modal header. Notice: it does not automatically render a header for your modal. Instead, you should create the modal header as you desire using this block's children list.\n\n`\"vtex.modal-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "showCloseButton": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the close icon button should be rendered in the modal header (`true`) or not (`false`).",
              "default": true
            },
            "iconCloseSize": {
              "type": "number",
              "markdownDescription": "`number`\n\nSize (in pixels) of the close icon button in the modal header.",
              "default": 32
            }
          }
        }
      }
    },

    "modal-layout": {
      "type": "object",
      "additionalProperties": false,
      "title": "Modal Layout (Layout)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-modal-layout\n\nThe Modal Layout app provides blocks that can help you create modals in your store.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Defines how the Modal content will be rendered through its children blocks. You can declare as its children the blocks `modal-header` and `modal-content` in order to create a modal with header and footer.\n\n`\"vtex.modal-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "scroll": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines how the modal should be scrolled by users.",
              "default": "content",
              "oneOf": [
                {
                  "const": "body",
                  "markdownDescription": "Users can scroll the whole modal by normally scrolling the page"
                },
                {
                  "const": "content",
                  "markdownDescription": "Users can scroll the modal *content* when hovering it"
                }
              ]
            },
            "disableEscapeKeyDown": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the modal should be closed when pressing the `Esc` key (`true`) or not (`false`).",
              "default": false
            },
            "fullScreen": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the modal should fill the whole screen (`true`) or not (`false`). This prop is responsive i.e. it adapts itself to the device's breakpoints.",
              "default": false
            },
            "backdrop": {
              "type": "string",
              "markdownDescription": "`enum`\n\nWhether the modal will have a clickable backdrop (`clickable`) or no backdrop at all (`none`). This prop is responsive i.e. it adapts itself to the device's breakpoints.",
              "default": "clickable",
              "oneOf": [
                {
                  "const": "clickable"
                },
                {
                  "const": "none"
                }
              ]
            }
          }
        }
      }
    },

    "modal-actions.close": {
      "type": "object",
      "additionalProperties": false,
      "title": "Modal Layout (Close Button)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-modal-layout\n\nThe Modal Layout app provides blocks that can help you create modals in your store.\n\nButton that closes the modal when clicked on. It is extremely useful in scenarios where your modal only has a form or a disclaimer box providing information for users.\n\n`\"vtex.modal-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "label": {
              "type": "string",
              "markdownDescription": "`string`\n\nDefines the text to be rendered in the close button. This prop default value depends on the store's default language which is set according to the website's [binding](https://help.vtex.com/tutorial/what-is-binding--4NcN3NJd0IeYccgWCI8O2W?locale=en). Default is: `Cancel`, `Cancelar`, or `Cancelar` for stores whose default language is, respectively, `English`, `Spanish` or `Portuguese`.",
              "default": "Cancelar"
            }
          }
        }
      }
    },

    "modal-actions": {
      "type": "object",
      "additionalProperties": false,
      "title": "Modal Layout (Actions)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-modal-layout\n\nThe Modal Layout app provides blocks that can help you create modals in your store.\n\nLogical block only responsible for rendering its child blocks that, in turn, are responsible for rendering call-to-action buttons inside the modal, such as a confirmation button.\n\n`\"vtex.modal-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          },
          "default": ["modal-actions.close", "remove-button"]
        }
      }
    },

    "modal-content": {
      "type": "object",
      "additionalProperties": false,
      "title": "Modal Layout (Content)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-modal-layout\n\nThe Modal Layout app provides blocks that can help you create modals in your store.\n\nDefines how the Modal content will be rendered through its children blocks. Preferably, this block should be used along with the modal-header in order to create a modal with header and footer.\n\n`\"vtex.modal-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "slider-layout": {
      "type": "object",
      "additionalProperties": false,
      "title": "Slider Layout",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-modal-layout\n\nSlider Layout is a flexible solution for building sliders of blocks within VTEX Store Framework, such as a carousel component.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Builds sliders of blocks for your store through its children list blocks.\n\n`\"vtex.slider-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "label": {
              "type": "string",
              "markdownDescription": "`string`\n\n`aria-label` attribute value to be used by the `<Slider/>` component when rendered. The `aria-label` value should explicitly tell users what the HTML element being inspected is responsible for.",
              "default": "slider"
            },
            "showNavigationArrows": {
              "type": "string",
              "markdownDescription": "`enum`\n\nWhen navigation arrows should be rendered. Possible values are: `mobileOnly`, `desktopOnly`, `always`, or `never`.",
              "default": "always",
              "oneOf": [
                {
                  "const": "mobileOnly"
                },
                {
                  "const": "desktopOnly"
                },
                {
                  "const": "always"
                },
                {
                  "const": "never"
                }
              ]
            },
            "showPaginationDots": {
              "type": "string",
              "markdownDescription": "`enum`\n\nWhen pagination dots should be rendered. Possible values are: `mobileOnly`, `desktopOnly`, `always`, or `never`.",
              "default": "always",
              "oneOf": [
                {
                  "const": "mobileOnly"
                },
                {
                  "const": "desktopOnly"
                },
                {
                  "const": "always"
                },
                {
                  "const": "never"
                }
              ]
            },
            "infinite": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the slider should be infinite (`true`) or not (`false`). When this prop is set as `false`, the slider will have an explicit end for users.",
              "default": false
            },
            "usePagination": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the slider should use slide pages (`true`) or not (`false`). When this prop is set as `false`, the slider will use smooth scrolling for slide navigation instead of arrows.",
              "default": true
            },
            "itemsPerPage": {
              "type": "object",
              "markdownDescription": "`object`\n\nnumber of slider items to be shown on each type of device.",
              "default": { "desktop": 5, "tablet": 3, "phone": 1 },
              "additionalProperties": false,
              "properties": {
                "desktop": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nnumber of slides to be shown on desktop devices.",
                  "default": 5
                },
                "tablet": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nnumber of slides to be shown on desktop devices.",
                  "default": 3
                },
                "phone": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nnumber of slides to be shown on desktop devices.",
                  "default": 1
                }
              }
            },
            "navigationStep": {
              "type": ["number", "string"],
              "markdownDescription": "`object`\n\nnumber of slider items to be shown on each type of device.",
              "default": "page",
              "oneOf": [{ "type": "number" }, { "const": "page" }]
            },
            "slideTransition": {
              "type": "object",
              "markdownDescription": "`object`\n\nControls the transition animation between slides based on [CSS attributes](https://developer.mozilla.org/en-US/docs/Web/CSS/transition).",
              "default": { "speed": 400, "delay": 0, "timing": "" },
              "additionalProperties": false,
              "properties": {
                "speed": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nTransition speed (in `ms`).",
                  "default": 400
                },
                "delay": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nDelay between slides transition (in `ms`).",
                  "default": 0
                },
                "timing": {
                  "type": "string",
                  "markdownDescription": "`string`\n\nTiming function.",
                  "default": ""
                }
              }
            },
            "autoplay": {
              "type": "object",
              "markdownDescription": "`object`\n\nControls the autoplay feature behavior.",
              "additionalProperties": false,
              "properties": {
                "timeout": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nTimeout (in `ms`) between each slide."
                },
                "stopOnHover": {
                  "type": "boolean",
                  "markdownDescription": "`boolean`\n\nWhether the auto play should stop when users are hovering the slider (`true`) or not (`false`)."
                }
              }
            },
            "fullWidth": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the slides should occupy the full page width, making the arrows appear on top of them (`true`) or not (`false`).",
              "default": true
            },
            "arrowSize": {
              "type": ["number", "object"],
              "markdownDescription": "`object`\n\nSlider arrows size (height and width) in pixels. This is a responsive prop, which means you can pass to it an object with different values for each breakpoint (`desktop`, `mobile`, `tablet`, and `phone`).",
              "additionalProperties": false,
              "default": 25,
              "properties": {
                "desktop": {
                  "type": "number",
                  "default": 25
                },
                "tablet": {
                  "type": "number",
                  "default": 25
                },
                "mobile": {
                  "type": "number",
                  "default": 25
                },
                "phone": {
                  "type": "number",
                  "default": 25
                }
              }
            },
            "centerMode": {
              "type": ["string", "object"],
              "additionalProperties": false,
              "markdownDescription": "`enum | object`\n\nDefines the slider elements positioning on the screen. Notice: This is a responsive prop, which means you can pass to it an object with different values for each breakpoint (`desktop`, `mobile`, `tablet`, and `phone`).",
              "oneOf": [
                {
                  "const": "center",
                  "markdownDescription": "Elements are centered, allowing users to see a peek of the previous and next slides"
                },
                {
                  "const": "to-the-left",
                  "markdownDescription": "Align elements to the left side, allowing users to see a peek of the next slide, but not the previous one"
                },
                {
                  "const": "disabled",
                  "markdownDescription": "Disables the feature, rendering elements on the whole screen without taking a peek in the previous and next slides"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "desktop": {
                      "$ref": "#/definitions/slider-layout-group:centerMode"
                    },
                    "tablet": {
                      "$ref": "#/definitions/slider-layout-group:centerMode"
                    },
                    "mobile": {
                      "$ref": "#/definitions/slider-layout-group:centerMode"
                    },
                    "phone": {
                      "$ref": "#/definitions/slider-layout-group:centerMode"
                    }
                  }
                }
              ],
              "properties": {
                "desktop": {
                  "$ref": "#/definitions/slider-layout-group:centerMode"
                },
                "tablet": {
                  "$ref": "#/definitions/slider-layout-group:centerMode"
                },
                "mobile": {
                  "$ref": "#/definitions/slider-layout-group:centerMode"
                },
                "phone": {
                  "$ref": "#/definitions/slider-layout-group:centerMode"
                }
              }
            }
          }
        }
      }
    },

    "slider-layout-group:centerMode": {
      "type": "string",
      "markdownDescription": "`enum`\n\nDefines the slider elements positioning on the screen. Notice: This is a responsive prop, which means you can pass to it an object with different values for each breakpoint (`desktop`, `mobile`, `tablet`, and `phone`).",
      "default": "disabled",
      "oneOf": [
        {
          "const": "center",
          "markdownDescription": "Elements are centered, allowing users to see a peek of the previous and next slides"
        },
        {
          "const": "to-the-left",
          "markdownDescription": "Align elements to the left side, allowing users to see a peek of the next slide, but not the previous one"
        },
        {
          "const": "disabled",
          "markdownDescription": "Disables the feature, rendering elements on the whole screen without taking a peek in the previous and next slides"
        }
      ]
    },

    "slider-layout-group": {
      "type": "object",
      "additionalProperties": false,
      "title": "Slider Layout (Group)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-modal-layout\n\nSlider Layout is a flexible solution for building sliders of blocks within VTEX Store Framework, such as a carousel component.\n\nEnables you to keep a group of slider-layout blocks in sync with each other.\n\n![Warning](https://developers.vtex.com/img/emojis/warning.png|width=12px) **All `slider-layout` blocks declared in the `slider-layout-group` must receive the same configuration, meaning the same props and values.**\n\nFor more on this, check out the [Advanced configurations](https://developers.vtex.com/vtex-developer-docs/docs/vtex-slider-layout#advanced-configurations).\n\n`\"vtex.slider-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "overlay-layout": {
      "type": "object",
      "additionalProperties": false,
      "title": "Overlay Layout",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-overlay-layout\n\nThe Overlay Layout app provides blocks that help you create a Dropdown, Select or a Tooltip component.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Declares a renderable children block responsible for building the overlay content.\n\n`\"vtex.slider-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "placement": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines the Overlay Layout content placement when it is triggered according to the Trigger component positioning. Possible values are: `bottom`, `left`, `right` or `top`. If there is no page space in the placement that you choose, it will fit in a fallback position.",
              "default": "bottom",
              "oneOf": [
                {
                  "const": "bottom"
                },
                {
                  "const": "left"
                },
                {
                  "const": "right"
                },
                {
                  "const": "top"
                }
              ]
            },
            "scrollBehavior": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines the Overlay Layout content behavior when users try to scroll the page.",
              "default": "default",
              "oneOf": [
                {
                  "const": "lock-page-scroll",
                  "markdownDescription": "Users can't scroll"
                },
                {
                  "const": "close-on-scroll",
                  "markdownDescription": "The block is closed when users start scrolling"
                },
                {
                  "const": "default",
                  "markdownDescription": "Scroll does not affect the Overlay Layout content"
                }
              ]
            },
            "backdrop": {
              "type": "string",
              "markdownDescription": "`enum`\n\nOnce the Overlay Layout content is rendered, it defines whether a backdrop overlay will be displayed (`visible`) or not (`none`).",
              "default": "none",
              "oneOf": [
                {
                  "const": "visible",
                  "markdownDescription": "The backdrop will close Overlay Layout content when clicked on."
                },
                {
                  "const": "none",
                  "markdownDescription": "The content will be closed only if any component from the page is clicked on."
                }
              ]
            },
            "showArrow": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether an arrow pointing to the overlay-trigger component should be displayed on UI (`true`) or not (`false`).",
              "default": false
            },
            "offsets": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`boolean`\n\nDefines the `overlay-layout` component positioning when compared to the `overlay-trigger` (unit used is `px`).",
              "default": { "skidding": 0, "distance": 0 },
              "properties": {
                "skidding": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nDefines the `overlay-layout` component positioning side by side with the `overlay-trigger`.",
                  "default": 0
                },
                "distance": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nDefines the distance between the `overlay-layout` and the `overlay-trigger` components in the UI. A positive number places the `overlay-layout` component farther, while a negative number lets it overlap the `overlay-trigger`.",
                  "default": 0
                }
              }
            }
          }
        }
      }
    },

    "overlay-trigger": {
      "type": "object",
      "additionalProperties": false,
      "title": "Overlay Layout (Trigger)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-overlay-layout\n\nThe Overlay Layout app provides blocks that help you create a Dropdown, Select or a Tooltip component.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Declares a renderable children block responsible for triggering the `overlay-layout` content.\n\n`\"vtex.slider-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "trigger": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDefines whether the `overlay-layout` will be opened by click (`click`) or hover (`hover`).",
              "default": "click",
              "oneOf": [
                {
                  "const": "click"
                },
                {
                  "const": "hover"
                }
              ]
            }
          }
        }
      }
    },

    "stack-layout": {
      "type": "object",
      "additionalProperties": false,
      "title": "Stack Layout",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-stack-layout\n\nUse this layout component to show blocks on top of other blocks.\n\n`\"vtex.stack-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "zIndexOffset": {
              "type": "number",
              "markdownDescription": "`number`\n\nAn offset to be passed to the zIndex of the children of the stack layout. If you pass 3, the first children will have zIndex of 3 and the next layer will have zIndex of 4, and so on.",
              "default": 0
            }
          }
        }
      }
    },

    "sticky-layout": {
      "type": "object",
      "additionalProperties": false,
      "title": "Sticky Layout",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-stack-layout\n\nThe Sticky Layout app provides layout structures to help building elements that should be fixed relative to the viewport in certain contexts.\n\nThe `sticky-layout` block is responsible for making its children stick to a certain position on the page when exiting the viewport while scrolling.\n\n`\"vtex.sticky-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "position": {
              "type": "string",
              "markdownDescription": "`enum`\n\nIndicates where the component should stick.",
              "oneOf": [
                {
                  "const": "top",
                  "markdownDescription": "Component will stick to the top of screen"
                },
                {
                  "const": "bottom",
                  "markdownDescription": "Component will stick to the bottom of screen"
                }
              ]
            },
            "verticalSpacing": {
              "type": "number",
              "markdownDescription": "`number`\n\nIndicates the distance in pixels from the position chosen in the `position` prop",
              "default": 0
            }
          }
        }
      }
    },

    "sticky-layout.stack-container": {
      "type": "object",
      "additionalProperties": false,
      "title": "Sticky Layout (Stack Container)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-stack-layout\n\nThe Sticky Layout app provides layout structures to help building elements that should be fixed relative to the viewport in certain contexts.\n\nThe `sticky-layout.stack-container` block can be used to orchestrate multiple sticky-layouts to have a stack behavior instead of one being on top of the other.\n\n`\"vtex.sticky-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "position": {
              "type": "string",
              "markdownDescription": "`enum`\n\nIndicates where the component should stick.",
              "oneOf": [
                {
                  "const": "top",
                  "markdownDescription": "Component will stick to the top of screen"
                },
                {
                  "const": "bottom",
                  "markdownDescription": "Component will stick to the bottom of screen"
                }
              ]
            },
            "verticalSpacing": {
              "type": "number",
              "markdownDescription": "`number`\n\nIndicates the distance in pixels from the position chosen in the `position` prop",
              "default": 0
            }
          }
        }
      }
    },

    "tab-layout": {
      "type": "object",
      "additionalProperties": false,
      "title": "Tab Layout",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-tab-layout\n\nThe Tab Layout app provides you the needed structure to create different layouts within the store's main one from the use of *tabs*.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Parent block that merely defines the logic (via its children blocks) for the layout structure, declaring the desired list of tabs and its content.\n\n`\"vtex.tab-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "defaultActiveTabId": {
              "type": "string",
              "markdownDescription": "`string`\n\nID of the desired tab to be rendered as the default one. If no value is provided, the first tab declared in the theme will be used as default."
            }
          }
        }
      }
    },

    "tab-list": {
      "type": "object",
      "additionalProperties": false,
      "title": "Tab Layout (List)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-tab-layout\n\nThe Tab Layout app provides you the needed structure to create different layouts within the store's main one from the use of *tabs*.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Defines the list of tabs to be rendered. It only accepts the `tab-list.item` block as child.\n\n`\"vtex.tab-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string",
            "pattern": "^tab-list.item#|^tab-list.item.children#"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "tab-list.item": {
      "type": "object",
      "additionalProperties": false,
      "title": "Tab Layout (Item)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-tab-layout\n\nThe Tab Layout app provides you the needed structure to create different layouts within the store's main one from the use of *tabs*.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Defines the rendering for a given tab. Notice that it does not define the tab content, which is handled by the `tab-content.item` block.\n\n`\"vtex.tab-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "tabId": {
              "type": "string",
              "markdownDescription": "`string`\n\nTab ID of your choosing. It will be used to match the tab to its content (defined by the `tab-content.item` block).",
              "default": ""
            },
            "label": {
              "type": "string",
              "markdownDescription": "`string`\n\nTab ID of your choosing. It will be used to match the tab to its content (defined by the `tab-content.item` block).",
              "default": "Defines the tab's text label."
            }
          }
        }
      }
    },

    "tab-list.item.children": {
      "type": "object",
      "additionalProperties": false,
      "title": "Tab Layout (Item with Children)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-tab-layout\n\nThe Tab Layout app provides you the needed structure to create different layouts within the store's main one from the use of *tabs*.\n\nFlexible alternative to `tab-list.item`. Defines the rendering for a given tab and also accepts any array of blocks as its children.\n\n`\"vtex.tab-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "tabId": {
              "type": "string",
              "markdownDescription": "`string`\n\nTab ID of your choosing. It will be used to match the tab to its content (defined by the `tab-content.item` block).",
              "default": ""
            }
          }
        }
      }
    },

    "tab-content": {
      "type": "object",
      "additionalProperties": false,
      "title": "Tab Layout (Content)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-tab-layout\n\nThe Tab Layout app provides you the needed structure to create different layouts within the store's main one from the use of *tabs*.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Defines the list of content to be rendered in each tab. It only accepts the `tab-content.item` block as child.\n\n`\"vtex.tab-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string",
            "pattern": "^tab-content.item#"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "tab-content.item": {
      "type": "object",
      "additionalProperties": false,
      "title": "Tab Layout (Content Item)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-tab-layout\n\nThe Tab Layout app provides you the needed structure to create different layouts within the store's main one from the use of *tabs*.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Defines the list of content to be rendered in each tab. It only accepts the `tab-content.item` block as child.\n\n`\"vtex.tab-layout@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "tabId": {
              "type": "string",
              "markdownDescription": "`string`\n\nTab ID of your choosing. It will be used to match the content to a given tab (defined by the `tab-list.item`/`tab-list.item.children` blocks).",
              "default": ""
            }
          }
        }
      }
    },

    "product-specification": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Specifications",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-specifications\n\nThe Product Specifications app provides blocks to render product specification data.\n\nRenders the product specification. It should be declared as a children of `product-specification-group`.\n\n`\"vtex.product-specifications@1.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "product-specification-group": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Specifications (Group)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-specifications\n\nThe Product Specifications app provides blocks to render product specification data.\n\nRenders the product specification group.\n\n`\"vtex.product-specifications@1.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "filter": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`object`\n\nFilters the specifications that should be displayed by the block.",
              "properties": {
                "specificationGroups": {
                  "type": "array",
                  "markdownDescription": "`string[]`\n\nArray of specification group names to be hidden or shown (according to what is defined in the `type` property) by the `product-specification-group` block.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "type": {
              "type": "string",
              "additionalProperties": false,
              "markdownDescription": "`enum`\n\nWhether the specification group names passed to the `specificationGroups` prop should be displayed or hidden on the UI.",
              "oneOf": [
                {
                  "const": "hide",
                  "markdownDescription": "Hides specification groups declared in the `specificationGroups` prop"
                },
                {
                  "const": "show",
                  "markdownDescription": "Only shows the specification groups declared in the `specificationGroups` prop"
                }
              ]
            }
          }
        }
      }
    },

    "product-specification-text": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Specifications (Text)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-specifications\n\nThe Product Specifications app provides blocks to render product specification data.\n\nMandatory children of `product-specification-group`, `product-specification` and `product-specification-values`. Depending on which block it is declared, the `product-specification-text` renders data regarding a specification group, a specification, or a specification value.\n\n`\"vtex.product-specifications@1.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "message": {
              "type": "string",
              "markdownDescription": "`string`\n\nDefines the block's default text message to be rendered on the UI. You can also define which text message a block will render on the UI using the admin's Site Editor and the markers prop.\n\n**Message variables available:**\n\n`{groupName}`\n\n`{specificationName}`\n\n`{specificationValue}`\n\n`{isFirstSpecificationValue}`\n\n`{isLastSpecificationValue}`",
              "default": ""
            },
            "markers": {
              "type": "array",
              "markdownDescription": "`string[]`\n\nIDs of your choosing to identify the block's rendered text message and customize it using the admin's Site Editor. Learn how to use them accessing the documentation on [Using the Markers prop to customize a block's message](https://vtex.io/docs/recipes/style/using-the-markers-prop-to-customize-a-blocks-message). Notice the following: a block's message can also be customized in the Store Theme source code using the `message` prop.",
              "default": []
            }
          }
        }
      }
    },

    "product-specification-values": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Specifications (Values)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-specifications\n\nThe Product Specifications app provides blocks to render product specification data.\n\nRenders the product specification value. It should be declared as a children of `product-specification`. It is possible to render with `HTML`.\n\n`\"vtex.product-specifications@1.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "product-quantity": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Quantity",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-quantity#product-quantity-and-product-summary-quantity-props\n\nThe Product Quantity allows users to a add a chosen amount of the displayed product in their cart.\n\nDisplays a quantity selector on the product details page. This block must be declared in the theme's `store.product` page template.\n\n`\"vtex.product-quantity@1.x\"`",
      "properties": {
        "props": {
          "$ref": "#/definitions/product-quantity:props"
        }
      }
    },

    "product-summary-quantity": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Quantity (Summary)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-quantity#product-quantity-and-product-summary-quantity-props\n\nThe Product Quantity allows users to a add a chosen amount of the displayed product in their cart.\n\nDisplays a quantity selector on [Product Summary](https://vtex.io/docs/components/all/vtex.product-summary/)'s blocks. This block must be declared as a children of the `product-summary.shelf` block.\n\n`\"vtex.product-quantity@1.x\"`",
      "properties": {
        "props": {
          "$ref": "#/definitions/product-quantity:props"
        }
      }
    },

    "product-quantity:props": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "All available properties for this block.",
      "properties": {
        "blockClass": {
          "type": ["array", "string"],
          "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "warningQuantityThreshold": {
          "type": "number",
          "markdownDescription": "`number`\n\nDisplays the quantity of remaining items in stock if the available quantity is less than or equal to the value given to this property. Default value: `0` (the quantity is not displayed)",
          "default": 0
        },
        "showUnit": {
          "type": "boolean",
          "markdownDescription": "`boolean`\n\nWhether the unit of measurement should be displayed (`true`) or not (`false`).",
          "default": true
        },
        "size": {
          "type": "string",
          "markdownDescription": "`enum`\n\nPreset size values for `font-size` and `padding`. You can check these value measures by accessing the [VTEX Styleguide](https://styleguide.vtex.com/#/Components/Forms/NumericStepper). Possible values are: `small`, `regular`, and `large`.",
          "default": "small",
          "oneOf": [
            {
              "const": "small"
            },
            {
              "const": "regular"
            },
            {
              "const": "large"
            }
          ]
        },
        "showLabel": {
          "type": "boolean",
          "markdownDescription": "`boolean`\n\nWhether a label should be displayed (`true`) or not (`false`).",
          "default": true
        },
        "selectorType": {
          "type": "string",
          "markdownDescription": "`enum`\n\nDefines how the quantity selector should initially behave.",
          "default": "stepper",
          "oneOf": [
            {
              "const": "stepper",
              "markdownDescription": "Displays an input field where the quantity can be directly defined, in addition to side buttons to increase or decrease the value"
            },
            {
              "const": "dropdown",
              "markdownDescription": "Shows a list of predefined-quantity options. In case the last quantity option is selected by users, the component is replaced with an input"
            }
          ]
        },
        "showBultAsUnit": {
          "type": "boolean",
          "markdownDescription": "`boolean`\n\nShow the quantity of products as unit, this is useful in the case that the product have unitMultiplier. Possible values are `true` and `false`. On the `false` `showBultAsUnit`, the quantity will be affected with the unitMultiplier. On the `true` `showBultAsUnit`, the quantity will be not affected with the unitMultiplier.",
          "default": false
        }
      }
    },

    "vtex.product-highlights@2.x:product-highlights": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Highlights",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-highlights\n\nThe Product Highlights app provides blocks to display highlight badges on products according to the collection or promotion they are linked to.\n\n![Warning](https://developers.vtex.com/img/emojis/warning.png|width=12px) Parent block responsible for defining, according to its children blocks (`product-highlight-text` and `product-highlight-wrapper`) and props, how the Product Highlights component will be displayed.\n\nNotice that **the Product Highlights' blocks need a Product context in order to work properly since they handle product data.** Therefore, when declaring them, be sure that they are in a theme template or block in which this context is available, such as the `store.product` and `product-summary.shelf`\n\n`\"vtex.product-highlights@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "type": {
              "type": "string",
              "markdownDescription": "`enum`\n\nDesired type of product highlight to be displayed.",
              "default": "collection",
              "oneOf": [
                {
                  "const": "collection",
                  "markdownDescription": "Highlights the product's collection therefore it must be used in conjunction with the [Collection Highlight](https://help.vtex.com/en/tutorial/collection-highlight-control--1tGdb2ndjqy6yWsk2YwKMu?locale=en) feature."
                },
                {
                  "const": "promotion",
                  "markdownDescription": "`promotion` and `teaser` should be used when the product is configured with a [promotion with highlights](https://help.vtex.com/en/tutorial/configuring-promotions-with-a-highlightflag--tutorials_2295?locale=en), but notice the following: `teaser` must only be used when the promotion presents restrictions. `promotion`, in turn, when it does not."
                },
                {
                  "const": "teaser",
                  "markdownDescription": "`promotion` and `teaser` should be used when the product is configured with a [promotion with highlights](https://help.vtex.com/en/tutorial/configuring-promotions-with-a-highlightflag--tutorials_2295?locale=en), but notice the following: `teaser` must only be used when the promotion presents restrictions. `promotion`, in turn, when it does not."
                }
              ]
            },
            "filter": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`object`\n\nDefines the highlights that should and should not be displayed by the block.",
              "properties": {
                "highlightNames": {
                  "type": "array",
                  "markdownDescription": "`string[]`\n\nArray of highlight names to be hidden or shown (according to what is defined in the `type` property) by the `product-highlights` block.",
                  "items": {
                    "type": "string"
                  }
                },
                "type": {
                  "type": "string",
                  "markdownDescription": "`enum`\n\nWhether the highlights names passed to the `highlightNames` prop should be displayed or hidden on the UI.",
                  "default": "",
                  "oneOf": [
                    {
                      "const": "hide",
                      "markdownDescription": "Hides highlights declared in the `highlightNames` prop"
                    },
                    {
                      "const": "show",
                      "markdownDescription": "Only shows the highlights declared in the `highlightNames` prop"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },

    "product-highlight-text": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Highlights (Text)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-highlights\n\nThe Product Highlights app provides blocks to display highlight badges on products according to the collection or promotion they are linked to.\n\nRenders a `span` HTML tag with the highlight name. It also provides data attributes and CSS handles for style customizations.\n\n`\"vtex.product-highlights@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "message": {
              "type": "string",
              "markdownDescription": "`string`\n\nDefines the block's default text message to be rendered on the UI. You can also define which text message a block will render on the UI using the admin's Site Editor and the `markers` prop.\n\n**Message variables available:**\n\n`{highlightName}`"
            },
            "markers": {
              "type": "array",
              "markdownDescription": "`string[]`\n\nIDs of your choosing to identify the block's rendered text message and customize it using the admin's Site Editor. Learn how to use them accessing the documentation on [Using the Markers prop to customize a block's message](https://vtex.io/docs/recipes/style/using-the-markers-prop-to-customize-a-blocks-message). Notice the following: a block's message can also be customized in the Store Theme source code using the `message` prop.",
              "default": [],
              "items": {
                "type": "string"
              }
            },
            "link": {
              "type": "string",
              "markdownDescription": "`string`\n\nIf set, creates a link to the string passed. You can interpolate the variables: `highlightText` and `highlightId`. Example: `/collection/{highlightId}`.",
              "default": ""
            }
          }
        }
      }
    },

    "product-highlight-wrapper": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Highlights (Wrapper)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-highlights\n\nThe Product Highlights app provides blocks to display highlight badges on products according to the collection or promotion they are linked to.\n\nIf you need to render other blocks along side with the highlight name, you may use this block. It renders a `div` HTML tag and its children blocks (if any).\n\n`\"vtex.product-highlights@2.x\"`",
      "properties": {
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "list-context.image-list": {
      "type": "object",
      "additionalProperties": false,
      "title": "Store Image (List Context - Image List)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-image\n\nThe Store Image app exports the `list-context.image-list` block, which is responsible for working with image content in the store's theme.\n\n`\"vtex.store-image@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "images": {
              "type": "array",
              "markdownDescription": "`object[]`\n\nArray of objects declaring all desired images to be rendered.",
              "items": {
                "type": "object",
                "$ref": "#/definitions/image-list:images"
              }
            },
            "height": {
              "type": "number",
              "markdownDescription": "`number`\n\nImage height for all images declared in the image object (in `px`)."
            },
            "preload": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nPreloads the first image in a list, which helps prioritizing the display of images over other assets",
              "default": false
            }
          }
        }
      }
    },

    "image-list": {
      "type": "object",
      "additionalProperties": false,
      "title": "Store Image (Image List)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-image\n\nThe Store Image app exports the `list-context.image-list` block, which is responsible for working with image content in the store's theme.\n\n`\"vtex.store-image@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "images": {
              "type": "array",
              "markdownDescription": "`object[]`\n\nArray of objects declaring all desired images to be rendered.",
              "items": {
                "type": "object",
                "$ref": "#/definitions/image-list:images"
              }
            },
            "height": {
              "type": "number",
              "markdownDescription": "`number`\n\nImage height for all images declared in the image object (in `px`)."
            }
          }
        }
      }
    },

    "image-slider": {
      "type": "object",
      "additionalProperties": false,
      "title": "Store Image (Image Slider)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-image\n\nThe Store Image app exports the `list-context.image-list` block, which is responsible for working with image content in the store's theme.\n\n![Warning](https://developers.vtex.com/img/emojis/warning.png|width=12px) This block is not yet in the docs.\n\n`\"vtex.store-image@0.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "images": {
              "type": "array",
              "markdownDescription": "`object[]`\n\nArray of objects declaring all desired images to be rendered.",
              "items": {
                "type": "object",
                "$ref": "#/definitions/image-list:images"
              }
            },
            "height": {
              "type": "number",
              "markdownDescription": "`number`\n\nImage height for all images declared in the image object (in `px`)."
            },
            "preload": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nPreloads the first image in a list, which helps prioritizing the display of images over other assets",
              "default": false
            },
            "sliderLayoutConfig": {
              "type": "object",
              "markdownDescription": "`object`\n\nProps derived from Slider Layout block.",
              "properties": {
                "itemsPerPage": {
                  "type": "object",
                  "markdownDescription": "`object`\n\nnumber of slider items to be shown on each type of device.",
                  "default": { "desktop": 1, "tablet": 1, "phone": 1 },
                  "additionalProperties": false,
                  "properties": {
                    "desktop": {
                      "type": "number",
                      "markdownDescription": "`number`\n\nnumber of slides to be shown on desktop devices.",
                      "default": 1
                    },
                    "tablet": {
                      "type": "number",
                      "markdownDescription": "`number`\n\nnumber of slides to be shown on desktop devices.",
                      "default": 1
                    },
                    "phone": {
                      "type": "number",
                      "markdownDescription": "`number`\n\nnumber of slides to be shown on desktop devices.",
                      "default": 1
                    }
                  }
                },
                "infinite": {
                  "type": "boolean",
                  "markdownDescription": "`boolean`\n\nWhether the slider should be infinite (`true`) or not (`false`). When this prop is set as `false`, the slider will have an explicit end for users.",
                  "default": true
                },
                "usePagination": {
                  "type": "boolean",
                  "markdownDescription": "`boolean`\n\nWhether the slider should use slide pages (`true`) or not (`false`). When this prop is set as `false`, the slider will use smooth scrolling for slide navigation instead of arrows.",
                  "default": true
                },
                "showPaginationDots": {
                  "type": "string",
                  "markdownDescription": "`enum`\n\nWhen pagination dots should be rendered. Possible values are: `mobileOnly`, `desktopOnly`, `always`, or `never`.",
                  "default": "always",
                  "oneOf": [
                    {
                      "const": "mobileOnly"
                    },
                    {
                      "const": "desktopOnly"
                    },
                    {
                      "const": "always"
                    },
                    {
                      "const": "never"
                    }
                  ]
                },
                "showNavigationArrows": {
                  "type": "string",
                  "markdownDescription": "`enum`\n\nWhen navigation arrows should be rendered. Possible values are: `mobileOnly`, `desktopOnly`, `always`, or `never`.",
                  "default": "always",
                  "oneOf": [
                    {
                      "const": "mobileOnly"
                    },
                    {
                      "const": "desktopOnly"
                    },
                    {
                      "const": "always"
                    },
                    {
                      "const": "never"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },

    "image-list:images": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "image": {
          "type": "string",
          "markdownDescription": "`string`\n\nImage URL.",
          "default": ""
        },
        "mobileImage": {
          "type": "string",
          "markdownDescription": "`string`\n\nMobile image URL.",
          "default": ""
        },
        "description": {
          "type": "string",
          "markdownDescription": "`string`\n\nImage description.",
          "default": ""
        },
        "width": {
          "type": ["string", "number"],
          "markdownDescription": "`string | number`\n\nImage width (in `%` or `px`).",
          "default": "100%"
        },
        "link": {
          "type": ["string", "number"],
          "markdownDescription": "`string | number`\n\nImage width (in `%` or `px`).",
          "default": "100%",
          "properties": {
            "url": {
              "type": "string",
              "markdownDescription": "`string`\n\nURL users will be redirected to when clicking on the image.",
              "default": ""
            },
            "noFollow": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the linked URL is endorsed by the owner of the page the user was navigating on i.e. if there is a commercial relationship between both pages (`true`) or not (`false`).",
              "default": false
            },
            "openNewTab": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether a new tab on browser will be opened (`true`) or not (`false`)."
            },
            "title": {
              "type": "string",
              "markdownDescription": "`string`\n\nText label used to identify the image in the admin's Site Editor.",
              "default": ""
            }
          }
        }
      }
    },

    "list-context.product-list": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (List Context)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Renders the list of products in the Product Summary component. It is responsible for fetching product data and providing it to the `product-summary.shelf` block. The last one, in turn, provides the product data to its children blocks.\n\nIn order to create a list of products, you need to use the `list-context.product-list` block and a `product-summary.shelf`.\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "blocks": {
          "type": "array",
          "markdownDescription": "Declare the related `product-summary.shelf`",
          "items": {
            "type": "string"
          },
          "default": ["product-summary.shelf"]
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          },
          "default": ["slider-layout"]
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "category": {
              "type": "array",
              "markdownDescription": "`string`\n\nCategory ID of the listed items. For sub-categories, use \"/\" (e.g. \"1/2/3\")",
              "default": ""
            },
            "specificationFilters": {
              "type": "array",
              "markdownDescription": "`object[]`\n\nSpecification Filters of the listed items.",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "id": {
                  "type": "string",
                  "default": ""
                },
                "value": {
                  "type": "string",
                  "default": ""
                }
              }
            },
            "collection": {
              "type": "string",
              "markdownDescription": "`string`\n\nFilter by collection.",
              "default": ""
            },
            "orderBy": {
              "type": "string",
              "markdownDescription": "`string`\n\nOrdination type of the items. Possible values: `''`\n\n `OrderByTopSaleDESC`\n\n`OrderByReleaseDateDESC`\n\n`OrderByBestDiscountDESC`\n\n`OrderByPriceDESC`\n\n`OrderByPriceASC`\n\n`OrderByNameASC`\n\n`OrderByNameDESC`",
              "default": "OrderByTopSaleDESC"
            },
            "hideUnavailableItems": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nHides items that are unavailable.",
              "default": false
            },
            "maxItems": {
              "type": "number",
              "markdownDescription": "`number`\n\nMaximum items to be fetched.",
              "default": 10
            },
            "skusFilter": {
              "type": "string",
              "markdownDescription": "`enum`\n\nControl SKUs returned for each product in the query. The less SKUs needed to be returned, the more performant your shelf query will be.",
              "default": "ALL_AVAILABLE",
              "oneOf": [
                {
                  "const": "FIRST_AVAILABLE",
                  "markdownDescription": "Most performant, ideal if you do not have a SKU selector in your shelf. Will return only the first available SKU for that product in your shelf query."
                },
                {
                  "const": "ALL_AVAILABLE",
                  "markdownDescription": "A bit better performance, will only return SKUs that are available, ideal if you have a SKU selector but still want a better performance."
                },
                {
                  "const": "ALL",
                  "markdownDescription": "Returns all SKUs related to that product, least performant option."
                }
              ]
            },
            "installmentCriteria": {
              "type": "string",
              "markdownDescription": "`enum`\n\nControl what price to be shown when price has different installments options.",
              "default": "MAX_WITHOUT_INTEREST",
              "oneOf": [
                {
                  "const": "MAX_WITHOUT_INTEREST",
                  "markdownDescription": "Will display the maximum installment option with no interest."
                },
                {
                  "const": "MAX_WITH_INTEREST",
                  "markdownDescription": "Will display the maximum installment option having interest or not."
                }
              ]
            },
            "listName": {
              "type": "string",
              "markdownDescription": "`string`\n\nName of the list property on Google Analytics events.",
              "default": ""
            },
            "preferredSKU": {
              "type": "string",
              "markdownDescription": "`enum`\n\nControls which SKU will be selected in the summary\n\n![Warning](https://developers.vtex.com/img/emojis/warning.png|width=12px) There's a way to select which SKU should take preference over this prop. You can create a Product (field) specification and per product assign the value of the desired SKU to be initially selected. Keep in mind that If the specification doesn't exist or if the value is empty, it will use the `preferredSKU` prop as fallback. You can read more about it, and how to implement it in [Recipes](https://vtex.io/docs/recipes/all)",
              "default": "FIRST_AVAILABLE",
              "oneOf": [
                {
                  "const": "FIRST_AVAILABLE",
                  "markdownDescription": "Selects the first available SKU in stock it finds."
                },
                {
                  "const": "LAST_AVAILABLE",
                  "markdownDescription": "Selects the last available SKU in stock it finds."
                },
                {
                  "const": "PRICE_ASC",
                  "markdownDescription": "Selects the cheapest SKU in stock it finds."
                },
                {
                  "const": "PRICE_DESC",
                  "markdownDescription": "Selects the most expensive SKU in stock it finds."
                }
              ]
            }
          }
        }
      }
    },

    "product-summary.shelf": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (Shelf)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\n![Mandatory](https://img.shields.io/badge/-Mandatory-red.png) Logical block responsible for providing the needed structure for the Product Summary component through its child blocks (listed below).\n\nIn order to create a list of products, you need to use the `list-context.product-list` block and a `product-summary.shelf`.\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "product-summary-attachment-list": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (Attachment List)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary-productsummaryattachmentlist\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\nRenders a list for the product [attachments](https://help.vtex.com/tutorial/adding-an-attachment--7zHMUpuoQE4cAskqEUWScU).\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "product-summary-description": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (Description)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\nRenders the product description.\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "product-summary-brand": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (Brand)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary-productsummarybrand\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\nRenders the product brand.\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "product-summary-buy-button": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (Buy Button)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary-productsummarybuybutton\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\nRenders the Buy Button.\n\n![Warning](https://developers.vtex.com/img/emojis/warning.png|width=12px) Notice that this block should only be configured if your store still uses the [Minicart v1](https://github.com/vtex-apps/minicart/blob/383d7bbd3295f06d1b5854a0add561a872e1515c/docs/README.md). When using the [Minicart v2](https://vtex.io/docs/components/all/vtex.minicart/), you should configure the [**Add To Cart Button**](https://vtex.io/docs/components/all/vtex.add-to-cart-button/) instead.\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "children": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          }
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "isOneClickBuy": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether the user should be redirected to Checkout after clicking on the Buy Button (`true`) or not (`false`).",
              "default": false
            },
            "buyButtonText": {
              "type": "string",
              "markdownDescription": "`string`\n\nCustom text that overwrites the default Buy Button text.",
              "default": ""
            },
            "displayBuyButton": {
              "type": "string",
              "markdownDescription": "`enum`\n\nSets the Buy Button display mode",
              "default": "displayButtonAlways",
              "oneOf": [
                {
                  "const": "displayButtonAlways",
                  "markdownDescription": "It will always be displayed"
                },
                {
                  "const": "displayButtonHover",
                  "markdownDescription": "Only displayed on hover"
                },
                {
                  "const": "displayButtonNone",
                  "markdownDescription": "It will be hidden for users"
                }
              ]
            },
            "customToastURL": {
              "type": "string",
              "markdownDescription": "`string`\n\nDefines a redirect link to the Toast displayed when an item is added to your cart.",
              "default": "/checkout/#/cart"
            },
            "buyButtonBehavior": {
              "type": "string",
              "markdownDescription": "`enum`\n\nSets the Buy Button behavior when it is clicked on.",
              "default": "default",
              "oneOf": [
                {
                  "const": "alwaysGoToProduct",
                  "markdownDescription": "Redirect users to the product page"
                },
                {
                  "const": "default",
                  "markdownDescription": "Redirect users to the minicart"
                },
                {
                  "const": "alwaysAddToTheCart",
                  "markdownDescription": "Add the selected SKU to the minicart. Use it only if there are SKU Selectors for each product variation. This way, users can properly select their desired SKU."
                }
              ]
            }
          }
        }
      }
    },

    "product-summary-image": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (Image)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary-productsummaryimage\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\nRenders the product image.\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "showBadge": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether a discount badge (if there is any) will be displayed on the product's image (`true`) or not (`false`)",
              "default": true
            },
            "badgeText": {
              "type": "string",
              "markdownDescription": "`string`\n\nText displayed on the discount badge (in case the badge is configured to be displayed on the image).",
              "default": ""
            },
            "showCollections": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether collection badges (if there are any) will be displayed (`true`) or not (`false`).",
              "default": false
            },
            "displayMode": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nDefines the Product Summary Image display mode. Possible values are: `normal` and `inline`.",
              "default": "normal"
            },
            "placeholder": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nDefines the Product Summary Image placeholder image.",
              "default": ""
            },
            "mainImageLabel": {
              "type": ["string", "object"],
              "additionalProperties": false,
              "markdownDescription": "`string | object`\n\nMatches the value defined in the `imageLabel` field from the admin's Catalog. Once matched, it defines which product image will be the main image displayed in the Product Summary component.",
              "properties": {
                "label": {
                  "type": "string",
                  "markdownDescription": "`string`\n\nText value that matches the value defined in the `imageLabel` field from the admin's Catalog. Once matched, it defines which product image will be the main image displayed in the Product Summary component. If you set a label and no match is found, the main image of the product will be shown instead.",
                  "default": ""
                },
                "labelMatchCriteria": {
                  "type": "string",
                  "markdownDescription": "`enum`\n\nCriteria to define if the image's `label` searched value should be exactly as provided or if it just needs to contain the substring anywhere in the image's label.",
                  "default": "exact",
                  "oneOf": [
                    {
                      "const": "exact",
                      "markdownDescription": "Finds the image that matches exactly the string filled in `label` field"
                    },
                    {
                      "const": "contains",
                      "markdownDescription": "Finds the first image that contains the substring filled in `label` field"
                    }
                  ]
                }
              }
            },
            "hoverImage": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`object`\n\nDefines which criteria should be used to define the hover image according to the product images in the admin's Catalog.",
              "properties": {
                "criteria": {
                  "type": "string",
                  "markdownDescription": "`enum`\n\nCriteria that should be used to define the hover image according to the product images in the admin's Catalog.",
                  "default": "label",
                  "oneOf": [
                    {
                      "const": "label",
                      "markdownDescription": "The hover image will be the one that matches the `label` value"
                    },
                    {
                      "const": "index",
                      "markdownDescription": "The hover image should be the one with the same `index` value"
                    }
                  ]
                },
                "labelMatchCriteria": {
                  "type": "string",
                  "markdownDescription": "`enum`\n\nCriteria to define if the image's `label` searched value should be exactly as provided or if it just needs to contain the substring anywhere in the image's `label`. *Caution:* This prop should only be used when the `criteria` prop is set as `label`.",
                  "default": "exact",
                  "oneOf": [
                    {
                      "const": "exact",
                      "markdownDescription": "Finds the image that matches exactly the string filled in `label` field"
                    },
                    {
                      "const": "contains",
                      "markdownDescription": "Finds the first image that contains the substring filled in `label` field"
                    }
                  ]
                },
                "label": {
                  "type": "string",
                  "markdownDescription": "`string`\n\nText string to match the desired image's `label` value. If no match is found, no image will be displayed during the hover. *Caution:* This prop should only be used when the `criteria` prop is set as `label`.",
                  "default": ""
                },
                "index": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nIndex number to match with the desired image's. If no match is found, no image will be displayed during the hover. *Caution:* This prop should only be used when the `criteria` prop is set as `index`."
                }
              }
            },
            "hoverImageLabel": {
              "type": "string",
              "markdownDescription": "`string`\n\n![Deprecated](https://img.shields.io/badge/-Deprecated-red) Text value that matches the value defined in the `imageLabel` field from the admin's Catalog. Once matched, it defines which product image will be displayed when the user is hovering. If you set a label and no match is found, no image will be displayed during the hover. *Caution:* Use the `hoverImage` prop instead."
            },
            "width": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`object`\n\nDefines the Product Summary Image width.",
              "properties": {
                "desktop": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nImage width for desktop users."
                },
                "mobile": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nImage width for mobile device users."
                }
              }
            },
            "height": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`object`\n\nDefines the Product Summary Image height.",
              "properties": {
                "desktop": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nImage height for desktop users."
                },
                "mobile": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nImage height for mobile device users."
                }
              }
            },
            "aspectRatio": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`object`\n\nAspect ratio of the Product Summary Image. It defines whether the image should be displayed in a square, portrait, landscape or in another format. The prop value should follow the [common aspect ratio notation](https://en.wikipedia.org/wiki/Aspect_ratio_(image)), which gives two numbers separated by a colon. For example: `1:1` for a square format or `3:4` for an upright portrait. Note that this prop won't work if you've already configured the `width` or `height` props.",
              "properties": {
                "desktop": {
                  "type": "string",
                  "markdownDescription": "`string`\n\nImage aspect ratio for desktop users."
                },
                "mobile": {
                  "type": "string",
                  "markdownDescription": "`string`\n\nImage aspect ratio for mobile device users."
                }
              }
            },
            "maxHeight": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`object`\n\nDefines the Product Summary Image max height. Note that this prop won't work if you've already configured the `width` or `height` props.",
              "properties": {
                "desktop": {
                  "type": "string",
                  "markdownDescription": "`string`\n\nImage maximum height for desktop users."
                },
                "mobile": {
                  "type": "string",
                  "markdownDescription": "`string`\n\nImage maximum height for mobile device users."
                }
              }
            }
          }
        }
      }
    },

    "product-summary-name": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (Name)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary-productsummaryname\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\nRenders the product name.\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nDefines the visibility on certain properties.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "showFieldsProps": {
              "type": "object",
              "markdownDescription": "`object`\n\nDefines the visibility on certain properties.",
              "additionalProperties": false,
              "default": {
                "showProductReference": false,
                "showBrandName": false,
                "showSku": false
              },
              "properties": {
                "showSku": {
                  "type": "boolean",
                  "markdownDescription": "`boolean`\n\nShow product SKU",
                  "default": false
                },
                "showProductReference": {
                  "type": "boolean",
                  "markdownDescription": "`boolean`\n\nShow product reference",
                  "default": false
                },
                "showBrandName": {
                  "type": "boolean",
                  "markdownDescription": "`boolean`\n\nShow brand name",
                  "default": false
                }
              }
            },
            "tag": {
              "type": "string",
              "markdownDescription": "`string`\n\nHTML tag used. It can be: `div`, `h1`, `h2`, `h3`.",
              "default": "h1",
              "oneOf": [
                {
                  "const": "div"
                },
                {
                  "const": "h1"
                },
                {
                  "const": "h2"
                },
                {
                  "const": "h3"
                }
              ]
            }
          }
        }
      }
    },

    "product-summary-sku-name": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (SKU Name)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary-productsummaryskuname\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\nRenders the selected SKU name.\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nDefines the visibility on certain properties.",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        }
      }
    },

    "product-summary-sku-selector": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Summary (SKU Selector)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-summary-productsummaryskuselector\n\nProduct Summary is an app responsible for summarizing product information (such as name, price and image) in other store blocks, such as the Shelf and the Minicart.\n\nRenders the SKU Selector block.\n\n`\"vtex.product-summary@2.x\"`",
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "props": {
          "$ref": "#/definitions/sku-selector:props"
        }
      }
    },

    "shelf.relatedProducts": {
      "type": "object",
      "additionalProperties": false,
      "title": "Related Products Shelf",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-shelf#related-products-shelf\n`nRelatedProducts` is a subtype of a Shelf block (`shelf.relatedProduct`) that queries and displays the related products on a Product Details Page. It can therefore only be declared in a product template (`store.product`).\n\n`\"vtex.product-summary@2.x\"`",
      "required": ["blocks"],
      "properties": {
        "title": {
          "type": "string",
          "markdownDescription": "Define a custom name. It will be shown in site editor for faster identification."
        },
        "blocks": {
          "type": "array",
          "markdownDescription": "Declare the blocks that must be wrapped inside the current one.",
          "items": {
            "type": "string"
          },
          "default": ["product-summary.shelf"]
        },
        "props": {
          "type": "object",
          "additionalProperties": false,
          "markdownDescription": "All available properties for this block.",
          "properties": {
            "blockClass": {
              "type": ["array", "string"],
              "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "recommendation": {
              "type": "string",
              "markdownDescription": "`enum`\n\nType of recommendations that will be displayed in the Shelf. Possible values: `similars`, `suggestions`, `accessories` (these first three depend on the product's data given in the admin's catalog) and `view`, `buy`, `viewandBought` (These 3 are automatically generated according to the storeâ€™s activity)",
              "default": "similars",
              "oneOf": [
                {
                  "const": "similars"
                },
                {
                  "const": "accessories"
                },
                {
                  "const": "suggestions"
                },
                {
                  "const": "view"
                },
                {
                  "const": "buy"
                },
                {
                  "const": "viewandBought"
                }
              ]
            },
            "hideOutOfStockItems": {
              "type": "boolean",
              "markdownDescription": "`boolean`\n\nWhether out of stock items should be hidden (`true`) or not (`false`)",
              "default": false
            },
            "productList": {
              "type": "object",
              "additionalProperties": false,
              "markdownDescription": "`object`\n\nProduct list schema",
              "properties": {
                "maxItems": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nMaximum number of items in the Shelf.",
                  "default": 10
                },
                "scroll": {
                  "type": "string",
                  "markdownDescription": "`enum`\n\nSlide transition scroll type. Possible values: `BY_PAGE`, `ONE_BY_ONE`",
                  "default": "BY_PAGE",
                  "oneOf": [
                    {
                      "const": "BY_PAGE"
                    },
                    {
                      "const": "ONE_BY_ONE"
                    }
                  ]
                },
                "arrows": {
                  "type": "boolean",
                  "markdownDescription": "`boolean`\n\nIf the arrows are displayable or not.",
                  "default": true
                },
                "showTitle": {
                  "type": "boolean",
                  "markdownDescription": "`boolean`\n\nIf a title should be displayed in the Shelf or not.",
                  "default": true
                },
                "titleText": {
                  "type": "string",
                  "markdownDescription": "`string`\n\nShelf title",
                  "default": ""
                },
                "gap": {
                  "type": "string",
                  "markdownDescription": "`enum`\n\nGap between items. Possible values: `ph0`, `ph3`, `ph5`, `ph7`.",
                  "default": "ph3",
                  "oneOf": [
                    {
                      "const": "ph0"
                    },
                    {
                      "const": "ph3"
                    },
                    {
                      "const": "ph5"
                    },
                    {
                      "const": "ph7"
                    }
                  ]
                },
                "minItemsPerPage": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nMinimum amount of Shelf slides. This prop can be used to control how many itens will be displayed on the Shelf even in the smallest screen size. Its value can be a **float**, which means that you can choose a multiple of 0.5 to indicate that you want to show a \"peek\" of the next slide on the Shelf.",
                  "default": 1
                },
                "itemsPerPage": {
                  "type": "number",
                  "markdownDescription": "`number`\n\nMaximum amount of Shelf slides. This prop can be used to control how many itens will be displayed on the Shelf even in the biggest screen size. Its value can be a **float**, which means that you can choose a multiple of 0.5 to indicate that you want to show a \"peek\" of the next slide on the Shelf.",
                  "default": 5
                },
                "summary": {
                  "type": "object",
                  "additionalProperties": false,
                  "markdownDescription": "`object`\n\nProduct Summary schema properties.",
                  "properties": {
                    "badgeText": {
                      "type": "string",
                      "markdownDescription": "`string`\n\nBadge's text"
                    },
                    "buyButtonText": {
                      "type": "string",
                      "markdownDescription": "`string`\n\nCustom buy button's text"
                    },
                    "labelSellingPrice": {
                      "type": "string",
                      "markdownDescription": "`string`\n\nLabel for selling price"
                    },
                    "labelListPrice": {
                      "type": "string",
                      "markdownDescription": "`string`\n\nLabel for list price"
                    },
                    "trackListName": {
                      "type": "boolean",
                      "markdownDescription": "`boolean`\n\nShould track list name",
                      "default": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "product-price:props": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "All available properties for this block.",
      "properties": {
        "blockClass": {
          "type": ["array", "string"],
          "markdownDescription": "`string | string[]`\n\nBlock container class. This propâ€™s set value functions as a block identifier for CSS customizations.",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "message": {
          "type": "string",
          "markdownDescription": "`string`\n\nDefines the block's default text message to be rendered on the UI. You can also define which text message a block will render on the UI using the admin's Site Editor and the markers prop.",
          "default": ""
        },
        "markers": {
          "type": "array",
          "markdownDescription": "`string[]`\n\nIDs of your choosing to identify the block's rendered text message and customize it using the admin's Site Editor. Learn how to use them accessing the documentation on [Using the Markers prop to customize a block's message](https://vtex.io/docs/recipes/style/using-the-markers-prop-to-customize-a-blocks-message). Notice the following: a block's message can also be customized in the Store Theme source code using the `message` prop.",
          "items": {
            "type": "string"
          },
          "default": []
        }
      }
    },

    "product-list-price": {
      "type": "object",
      "additionalProperties": false,
      "title": "Product Price (List)",
      "markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-product-price\n\nRenders the product list price. If it is equal or lower than the product selling price, this block will not be rendered.\n\n**Message variables available:**\n\n`{listPriceValue}`\n\n`{listPriceWithTax}`\n\n`{listPriceWithUnitMultiplier}`\n\n`{taxPercentage}`\n\n`{taxValue}`\n\n`{hasMeasurementUnit}`\n\n`{taxValue}`\n\n`{hasUnitMultiplier}`\n\n`{unitMultiplier}`\n\n`\"vtex.product-price@1.x\"`",
      "properties": {
        "props": {
          "$ref": "#/definitions/product-price:props"
        }
      }
    }
  },

  "properties": {
    "flex-layout.row": {
      "$ref": "#/definitions/flex-layout.row"
    },
    "flex-layout.col": {
      "$ref": "#/definitions/flex-layout.col"
    },
    "add-to-cart-button": {
      "$ref": "#/definitions/add-to-cart-button"
    },
    "breadcrumb": {
      "$ref": "#/definitions/breadcrumb"
    },
    "breadcrumb.search": {
      "$ref": "#/definitions/breadcrumb.search"
    },
    "rich-text": {
      "$ref": "#/definitions/rich-text"
    },
    "disclosure-layout": {
      "$ref": "#/definitions/disclosure-layout"
    },
    "disclosure-trigger": {
      "$ref": "#/definitions/disclosure-trigger"
    },
    "disclosure-content": {
      "$ref": "#/definitions/disclosure-content"
    },
    "disclosure-state-indicator": {
      "$ref": "#/definitions/disclosure-state-indicator"
    },
    "disclosure-layout-group": {
      "$ref": "#/definitions/disclosure-layout-group"
    },
    "disclosure-trigger-group": {
      "$ref": "#/definitions/disclosure-trigger-group"
    },
    "condition-layout.product": {
      "$ref": "#/definitions/condition-layout.product"
    },
    "condition-layout.binding": {
      "$ref": "#/definitions/condition-layout.binding"
    },
    "responsive-layout.desktop": {
      "$ref": "#/definitions/responsive-layout.desktop"
    },
    "responsive-layout.mobile": {
      "$ref": "#/definitions/responsive-layout.mobile"
    },
    "responsive-layout.tablet": {
      "$ref": "#/definitions/responsive-layout.tablet"
    },
    "responsive-layout.phone": {
      "$ref": "#/definitions/responsive-layout.phone"
    },
    "footer": {
      "$ref": "#/definitions/footer"
    },
    "footer-layout.desktop": {
      "$ref": "#/definitions/footer-layout.desktop"
    },
    "footer-layout.mobile": {
      "$ref": "#/definitions/footer-layout.mobile"
    },
    "powered-by": {
      "$ref": "#/definitions/powered-by"
    },
    "social-networks": {
      "$ref": "#/definitions/social-networks"
    },
    "accepted-payment-methods": {
      "$ref": "#/definitions/accepted-payment-methods"
    },
    "header": {
      "$ref": "#/definitions/header"
    },
    "header-layout.desktop": {
      "$ref": "#/definitions/header-layout.desktop"
    },
    "header-layout.mobile": {
      "$ref": "#/definitions/header-layout.mobile"
    },
    "header-row": {
      "$ref": "#/definitions/header-row"
    },
    "header-force-center": {
      "$ref": "#/definitions/header-force-center"
    },
    "header-border": {
      "$ref": "#/definitions/header-border"
    },
    "login": {
      "$ref": "#/definitions/login"
    },
    "login-content": {
      "$ref": "#/definitions/login-content"
    },
    "minicart.v2": {
      "$ref": "#/definitions/minicart.v2"
    },
    "logo": {
      "$ref": "#/definitions/logo"
    },
    "vtex.menu@2.x:menu": {
      "$ref": "#/definitions/vtex.menu@2.x:menu"
    },
    "menu-item": {
      "$ref": "#/definitions/menu-item"
    },
    "product-assembly-options": {
      "$ref": "#/definitions/product-assembly-options"
    },
    "assembly-option-input-values": {
      "$ref": "#/definitions/assembly-option-input-values"
    },
    "assembly-option-item-customize": {
      "$ref": "#/definitions/assembly-option-item-customize"
    },
    "product-list": {
      "$ref": "#/definitions/product-list"
    },
    "product-list-content-desktop": {
      "$ref": "#/definitions/product-list-content-desktop"
    },
    "product-list-content-mobile": {
      "$ref": "#/definitions/product-list-content-mobile"
    },
    "message": {
      "$ref": "#/definitions/message"
    },
    "price": {
      "$ref": "#/definitions/price"
    },
    "unit-price": {
      "$ref": "#/definitions/unit-price"
    },
    "product-list-image": {
      "$ref": "#/definitions/product-list-image"
    },
    "product-reference": {
      "$ref": "#/definitions/product-reference"
    },
    "remove-button": {
      "$ref": "#/definitions/remove-button"
    },
    "quantity-selector": {
      "$ref": "#/definitions/quantity-selector"
    },
    "search-bar": {
      "$ref": "#/definitions/search-bar"
    },
    "back-to-top-button": {
      "$ref": "#/definitions/back-to-top-button"
    },
    "image": {
      "$ref": "#/definitions/image"
    },
    "image-new": {
      "$ref": "#/definitions/image-new"
    },
    "info-card": {
      "$ref": "#/definitions/info-card"
    },
    "sku-selector": {
      "$ref": "#/definitions/sku-selector"
    },
    "notification.bar": {
      "$ref": "#/definitions/notification.bar"
    },
    "notification.inline": {
      "$ref": "#/definitions/notification.inline"
    },
    "product-brand": {
      "$ref": "#/definitions/product-brand"
    },
    "product-description": {
      "$ref": "#/definitions/product-description"
    },
    "product-name": {
      "$ref": "#/definitions/product-name"
    },
    "product-images": {
      "$ref": "#/definitions/product-images"
    },
    "share": {
      "$ref": "#/definitions/share"
    },
    "shipping-simulator": {
      "$ref": "#/definitions/shipping-simulator"
    },
    "modal-trigger": {
      "$ref": "#/definitions/modal-trigger"
    },
    "modal-layout": {
      "$ref": "#/definitions/modal-layout"
    },
    "modal-header": {
      "$ref": "#/definitions/modal-header"
    },
    "modal-content": {
      "$ref": "#/definitions/modal-content"
    },
    "modal-actions": {
      "$ref": "#/definitions/modal-actions"
    },
    "modal-actions.close": {
      "$ref": "#/definitions/modal-actions.close"
    },
    "slider-layout": {
      "$ref": "#/definitions/slider-layout"
    },
    "slider-layout-group": {
      "$ref": "#/definitions/slider-layout-group"
    },
    "overlay-layout": {
      "$ref": "#/definitions/overlay-layout"
    },
    "overlay-trigger": {
      "$ref": "#/definitions/overlay-trigger"
    },
    "stack-layout": {
      "$ref": "#/definitions/stack-layout"
    },
    "sticky-layout": {
      "$ref": "#/definitions/sticky-layout"
    },
    "sticky-layout.stack-container": {
      "$ref": "#/definitions/sticky-layout.stack-container"
    },
    "tab-layout": {
      "$ref": "#/definitions/tab-layout"
    },
    "tab-list": {
      "$ref": "#/definitions/tab-list"
    },
    "tab-list.item": {
      "$ref": "#/definitions/tab-list.item"
    },
    "tab-list.item.children": {
      "$ref": "#/definitions/tab-list.item.children"
    },
    "tab-content": {
      "$ref": "#/definitions/tab-content"
    },
    "tab-content.item": {
      "$ref": "#/definitions/tab-content.item"
    },
    "product-specification-group": {
      "$ref": "#/definitions/product-specification-group"
    },
    "product-specification": {
      "$ref": "#/definitions/product-specification"
    },
    "product-specification-values": {
      "$ref": "#/definitions/product-specification-values"
    },
    "product-specification-text": {
      "$ref": "#/definitions/product-specification-text"
    },
    "product-quantity": {
      "$ref": "#/definitions/product-quantity"
    },
    "product-summary-quantity": {
      "$ref": "#/definitions/product-summary-quantity"
    },
    "vtex.product-highlights@2.x:product-highlights": {
      "$ref": "#/definitions/vtex.product-highlights@2.x:product-highlights"
    },
    "product-highlight-text": {
      "$ref": "#/definitions/product-highlight-text"
    },
    "product-highlight-wrapper": {
      "$ref": "#/definitions/product-highlight-wrapper"
    },
    "list-context.image-list": {
      "$ref": "#/definitions/list-context.image-list"
    },
    "image-list": {
      "$ref": "#/definitions/image-list"
    },
    "image-slider": {
      "$ref": "#/definitions/image-slider"
    },
    "list-context.product-list": {
      "$ref": "#/definitions/list-context.product-list"
    },
    "product-summary.shelf": {
      "$ref": "#/definitions/product-summary.shelf"
    },
    "product-summary-attachment-list": {
      "$ref": "#/definitions/product-summary-attachment-list"
    },
    "product-summary-description": {
      "$ref": "#/definitions/product-summary-description"
    },
    "product-summary-brand": {
      "$ref": "#/definitions/product-summary-brand"
    },
    "product-summary-buy-button": {
      "$ref": "#/definitions/product-summary-buy-button"
    },
    "product-summary-image": {
      "$ref": "#/definitions/product-summary-image"
    },
    "product-summary-name": {
      "$ref": "#/definitions/product-summary-name"
    },
    "product-summary-sku-name": {
      "$ref": "#/definitions/product-summary-sku-name"
    },
    "shelf.relatedProducts": {
      "$ref": "#/definitions/shelf.relatedProducts"
    },
    "product-list-price": {
      "$ref": "#/definitions/product-list-price"
    }
  },

  "patternProperties": {
    "^flex-layout.row#": {
      "$ref": "#/definitions/flex-layout.row"
    },
    "^flex-layout.col#": {
      "$ref": "#/definitions/flex-layout.col"
    },
    "^add-to-cart-button#": {
      "$ref": "#/definitions/add-to-cart-button"
    },
    "^breadcrumb#": {
      "$ref": "#/definitions/breadcrumb"
    },
    "^breadcrumb.search#": {
      "$ref": "#/definitions/breadcrumb.search"
    },
    "^rich-text#": {
      "$ref": "#/definitions/rich-text"
    },
    "^disclosure-layout#": {
      "$ref": "#/definitions/disclosure-layout"
    },
    "^disclosure-trigger#": {
      "$ref": "#/definitions/disclosure-trigger"
    },
    "^disclosure-content#": {
      "$ref": "#/definitions/disclosure-content"
    },
    "^disclosure-state-indicator#": {
      "$ref": "#/definitions/disclosure-state-indicator"
    },
    "^disclosure-layout-group#": {
      "$ref": "#/definitions/disclosure-layout-group"
    },
    "^disclosure-trigger-group#": {
      "$ref": "#/definitions/disclosure-trigger-group"
    },
    "^condition-layout.product#": {
      "$ref": "#/definitions/condition-layout.product"
    },
    "^condition-layout.binding#": {
      "$ref": "#/definitions/condition-layout.binding"
    },
    "^responsive-layout.desktop#": {
      "$ref": "#/definitions/responsive-layout.desktop"
    },
    "^responsive-layout.mobile#": {
      "$ref": "#/definitions/responsive-layout.mobile"
    },
    "^responsive-layout.tablet#": {
      "$ref": "#/definitions/responsive-layout.tablet"
    },
    "^responsive-layout.phone#": {
      "$ref": "#/definitions/responsive-layout.phone"
    },
    "^footer#": {
      "$ref": "#/definitions/footer"
    },
    "^footer-layout.desktop#": {
      "$ref": "#/definitions/footer-layout.desktop"
    },
    "^footer-layout.mobile#": {
      "$ref": "#/definitions/footer-layout.mobile"
    },
    "^powered-by#": {
      "$ref": "#/definitions/powered-by"
    },
    "^social-networks#": {
      "$ref": "#/definitions/social-networks"
    },
    "^accepted-payment-methods#": {
      "$ref": "#/definitions/accepted-payment-methods"
    },
    "^header#": {
      "$ref": "#/definitions/header"
    },
    "^header-layout.desktop#": {
      "$ref": "#/definitions/header-layout.desktop"
    },
    "^header-layout.mobile#": {
      "$ref": "#/definitions/header-layout.mobile"
    },
    "^header-row#": {
      "$ref": "#/definitions/header-row"
    },
    "^header-force-center#": {
      "$ref": "#/definitions/header-force-center"
    },
    "^header-border#": {
      "$ref": "#/definitions/header-border"
    },
    "^login#": {
      "$ref": "#/definitions/login"
    },
    "^login-content#": {
      "$ref": "#/definitions/login-content"
    },
    "^minicart.v2#": {
      "$ref": "#/definitions/minicart.v2"
    },
    "^logo#": {
      "$ref": "#/definitions/logo"
    },
    "^vtex.menu@2.x:menu#": {
      "$ref": "#/definitions/vtex.menu@2.x:menu"
    },
    "^menu-item#": {
      "$ref": "#/definitions/menu-item"
    },
    "^product-assembly-options#": {
      "$ref": "#/definitions/product-assembly-options"
    },
    "^assembly-option-input-values#": {
      "$ref": "#/definitions/assembly-option-input-values"
    },
    "^assembly-option-item-customize#": {
      "$ref": "#/definitions/assembly-option-item-customize"
    },
    "^product-list#": {
      "$ref": "#/definitions/product-list"
    },
    "^product-list-content-desktop#": {
      "$ref": "#/definitions/product-list-content-desktop"
    },
    "^product-list-content-mobile#": {
      "$ref": "#/definitions/product-list-content-mobile"
    },
    "^message#": {
      "$ref": "#/definitions/message"
    },
    "^price#": {
      "$ref": "#/definitions/price"
    },
    "^unit-price#": {
      "$ref": "#/definitions/unit-price"
    },
    "^product-list-image#": {
      "$ref": "#/definitions/product-list-image"
    },
    "^product-reference#": {
      "$ref": "#/definitions/product-reference"
    },
    "^remove-button#": {
      "$ref": "#/definitions/remove-button"
    },
    "^quantity-selector#": {
      "$ref": "#/definitions/quantity-selector"
    },
    "^search-bar#": {
      "$ref": "#/definitions/search-bar"
    },
    "^back-to-top-button#": {
      "$ref": "#/definitions/back-to-top-button"
    },
    "^image#": {
      "$ref": "#/definitions/image"
    },
    "^image-new#": {
      "$ref": "#/definitions/image-new"
    },
    "^info-card#": {
      "$ref": "#/definitions/info-card"
    },
    "^sku-selector#": {
      "$ref": "#/definitions/sku-selector"
    },
    "^notification.bar#": {
      "$ref": "#/definitions/notification.bar"
    },
    "^notification.inline#": {
      "$ref": "#/definitions/notification.inline"
    },
    "^product-brand#": {
      "$ref": "#/definitions/product-brand"
    },
    "^product-description#": {
      "$ref": "#/definitions/product-description"
    },
    "^product-name#": {
      "$ref": "#/definitions/product-name"
    },
    "^product-images#": {
      "$ref": "#/definitions/product-images"
    },
    "^share#": {
      "$ref": "#/definitions/share"
    },
    "^shipping-simulator#": {
      "$ref": "#/definitions/shipping-simulator"
    },
    "^modal-trigger#": {
      "$ref": "#/definitions/modal-trigger"
    },
    "^modal-layout#": {
      "$ref": "#/definitions/modal-layout"
    },
    "^modal-header#": {
      "$ref": "#/definitions/modal-header"
    },
    "^modal-content#": {
      "$ref": "#/definitions/modal-content"
    },
    "^modal-actions#": {
      "$ref": "#/definitions/modal-actions"
    },
    "^modal-actions#.close": {
      "$ref": "#/definitions/modal-actions.close"
    },
    "^slider-layout#": {
      "$ref": "#/definitions/slider-layout"
    },
    "^slider-layout-group#": {
      "$ref": "#/definitions/slider-layout-group"
    },
    "^overlay-layout#": {
      "$ref": "#/definitions/overlay-layout"
    },
    "^overlay-trigger#": {
      "$ref": "#/definitions/overlay-trigger"
    },
    "^stack-layout#": {
      "$ref": "#/definitions/stack-layout"
    },
    "^sticky-layout#": {
      "$ref": "#/definitions/sticky-layout"
    },
    "^sticky-layout.stack-container#": {
      "$ref": "#/definitions/sticky-layout.stack-container"
    },
    "^tab-layout#": {
      "$ref": "#/definitions/tab-layout"
    },
    "^tab-list#": {
      "$ref": "#/definitions/tab-list"
    },
    "^tab-list.item#": {
      "$ref": "#/definitions/tab-list.item"
    },
    "^tab-list.item.children#": {
      "$ref": "#/definitions/tab-list.item.children"
    },
    "^tab-content#": {
      "$ref": "#/definitions/tab-content"
    },
    "^tab-content.item#": {
      "$ref": "#/definitions/tab-content.item"
    },
    "^product-specification-group#": {
      "$ref": "#/definitions/product-specification-group"
    },
    "^product-specification#": {
      "$ref": "#/definitions/product-specification"
    },
    "^product-specification-values#": {
      "$ref": "#/definitions/product-specification-values"
    },
    "^product-specification-text#": {
      "$ref": "#/definitions/product-specification-text"
    },
    "^product-quantity#": {
      "$ref": "#/definitions/product-quantity"
    },
    "^product-summary-quantity#": {
      "$ref": "#/definitions/product-summary-quantity"
    },
    "^vtex.product-highlights@2.x:product-highlights#": {
      "$ref": "#/definitions/vtex.product-highlights@2.x:product-highlights"
    },
    "^product-highlight-text#": {
      "$ref": "#/definitions/product-highlight-text"
    },
    "^product-highlight-wrapper#": {
      "$ref": "#/definitions/product-highlight-wrapper"
    },
    "^list-context.image-list#": {
      "$ref": "#/definitions/list-context.image-list"
    },
    "^image-list#": {
      "$ref": "#/definitions/image-list"
    },
    "^image-slider#": {
      "$ref": "#/definitions/image-slider"
    },
    "^list-context.product-list#": {
      "$ref": "#/definitions/list-context.product-list"
    },
    "^product-summary#.shelf": {
      "$ref": "#/definitions/product-summary.shelf"
    },
    "^product-summary-attachment-list#": {
      "$ref": "#/definitions/product-summary-attachment-list"
    },
    "^product-summary-description#": {
      "$ref": "#/definitions/product-summary-description"
    },
    "^product-summary-brand#": {
      "$ref": "#/definitions/product-summary-brand"
    },
    "^product-summary-buy-button#": {
      "$ref": "#/definitions/product-summary-buy-button"
    },
    "^product-summary-image#": {
      "$ref": "#/definitions/product-summary-image"
    },
    "^product-summary-name#": {
      "$ref": "#/definitions/product-summary-name"
    },
    "^product-summary-sku-name#": {
      "$ref": "#/definitions/product-summary-sku-name"
    },
    "^shelf.relatedProducts#": {
      "$ref": "#/definitions/shelf.relatedProducts"
    },
    "^product-list-price#": {
      "$ref": "#/definitions/product-list-price"
    }
  }
}
